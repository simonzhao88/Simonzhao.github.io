{"title":"Python的基本语法整理","slug":"Python的基本语法整理","date":"2018-05-26T06:54:17.000Z","updated":"2018-05-26T08:03:23.434Z","comments":true,"path":"api/articles/Python的基本语法整理.json","photos":[],"link":"","excerpt":"Python的基础语法知识整理集合收集整理了Python的基础语法，包括数据类型的详细解释和Python自带的各类模块1. 进制之间的转换二进制 -&gt; 十进制<br>八进制 -&gt; 二级制<br>十进制 -&gt; 二进制","covers":null,"content":"<h1 id=\"Python的基础语法知识整理集合\"><a href=\"#Python的基础语法知识整理集合\" class=\"headerlink\" title=\"Python的基础语法知识整理集合\"></a>Python的基础语法知识整理集合</h1><p>收集整理了Python的基础语法，包括数据类型的详细解释和Python自带的各类模块</p>\n<h2 id=\"1-进制之间的转换\"><a href=\"#1-进制之间的转换\" class=\"headerlink\" title=\"1. 进制之间的转换\"></a>1. 进制之间的转换</h2><p>二进制 -&gt; 十进制<br>八进制 -&gt; 二级制<br>十进制 -&gt; 二进制</p>\n<a id=\"more\"></a>\n<h2 id=\"2-逻辑运算符\"><a href=\"#2-逻辑运算符\" class=\"headerlink\" title=\"2.逻辑运算符\"></a>2.逻辑运算符</h2><p>逻辑运算符<br>与(and)   或(or)  非(not)</p>\n<h2 id=\"3-数学函数\"><a href=\"#3-数学函数\" class=\"headerlink\" title=\"3.数学函数\"></a>3.数学函数</h2><p>abs(): 返回数字的绝对值<br>max(): 返回给定参数中的最大值<br>min():返回给定参数中最小的值<br>pow(): 求幂(求次方)  [求3^4  print(3**4)  print(pow(3, 4))]<br>round():四舍五入,如果只有一个参数,默认不保留小数点.参数二: 小数点后保留的位数      </p>\n<p>import math<br>math.ceil():向上取整<br>math.floor():向下取整<br>math.sqrt():求开方<br>math.modf():返回参数的整数部分和小数部分</p>\n<p>import random<br>random.choice():返回列表,元祖,字典中的某一个值<br>random.choices():返回列表,元祖,字典中的指定个数值个值 k 关键字参数<br>random.random():返回0-1之间的数,  [0, 1)<br>random.uniform():返回指定的一个区间范围的随机数 [, )<br>random.randint():返回指定区间范围的随机整数 [, ]<br>random.shuffle():将列表中的数据进行打乱排序                 </p>\n<h2 id=\"4-字符串\"><a href=\"#4-字符串\" class=\"headerlink\" title=\"4. 字符串\"></a>4. 字符串</h2><p>len():求字符串,元组,列表,字典,集合的长度<br>split():通过指定分隔符对字符串进行切片<br>str1 <em> 3 (</em>将字符串拼接n次)</p>\n<p>提取某个字符串<br>    str1[::3] 正序输出 步长为3<br>    str2 = str1[::-1] 倒序输出<br>    str2 = str1[::-2] 倒序输出 步长为2<br>转义字符:<br>     \\t(制表符) \\n(换行符)       </p>\n<h2 id=\"5-字符串格式化\"><a href=\"#5-字符串格式化\" class=\"headerlink\" title=\"5.字符串格式化\"></a>5.字符串格式化</h2><p>%s:   给字符串站位<br>%d:   给int类型站位<br>%f:   给浮点类型站位,  默认保留6为小数</p>\n<pre><code>%.2f:  保留两位小数\n%10.2f  共10位,保留两位小数,其他为使用空格补齐\n%010.2f  共10位,保留两位小数,其他为使用0补齐\n</code></pre><p>%c:   打印一个字符<br>%o:   将十进制转换成八进制<br>%x:   将十进制转换成十六进制</p>\n<h2 id=\"6-字符串比较大小\"><a href=\"#6-字符串比较大小\" class=\"headerlink\" title=\"6.字符串比较大小\"></a>6.字符串比较大小</h2><p>从第一个字符开始比较,将字符转换成ascii值进行比较<br>如果小于则返回True,否则返回False<br>0-9:48-57<br>a-z: 97-122<br>A-Z:65-90</p>\n<p> 附: 字符串相关函数</p>\n<h2 id=\"7-表达式\"><a href=\"#7-表达式\" class=\"headerlink\" title=\"7.表达式\"></a>7.表达式</h2><p>表达式为真的情况: not 0    -1 为真<br>表达式为假的情况: 0 ‘’ None  False []  ()  {}</p>\n<h2 id=\"8-列表\"><a href=\"#8-列表\" class=\"headerlink\" title=\"8.列表\"></a>8.列表</h2><p>列表函数:</p>\n<ol>\n<li>append()往列表后边追加一个元素([1, 2 ,3],当做一个元素追加到列表中) # 没有add()方法</li>\n<li>extend()在末尾一次性追加另外一个列表中的多个值([1, 2 ,3],当做三个个元素追加到列表中)</li>\n<li>insert():在指定下标出添加一个元素,原来位置处的元素往后移动<br>list.insert(下标, 对象)</li>\n<li>pop():将列表中指定下标的元素删除, 如果默认不传递参数,则删除的是最后一个元素<br>@参数一: [可有可无] 列表对应的下标</li>\n<li>remove():移除列表中指定的元素<br>@参数一: 列表中的元素</li>\n<li>clear():清除列表中所有的元素</li>\n<li>index():获取列表元素锁对应的下标<br> @参数一:  列表中的某一个元素  返回值:  列表中元素所对应的下标    </li>\n<li>count(): 计算列表中元素出现的次数</li>\n<li>reverse(): 用于反向列表中元素  等同于[::-1]<br>reversed(seq) 函数返回一个反转的迭代器。<br>seq – 要转换的序列，可以是 tuple, string, list 或 range。</li>\n<li><p>sort(): 应用在 list 上的方法, 返回的是对已经存在的列表进行操作<br>sort(self, key=None, reverse=False)<br>sorted(): 所有可迭代的对象进行排序操作, 返回的是一个新的 list，而不是在原来的基础上进行的操作。<br>sorted(iterable, key=None, reverse=False)</p>\n<p>reverse = True 降序 , reverse = Flase 升序(默认)</p>\n</li>\n</ol>\n<p><strong>引用传递</strong></p>\n<p>在列表中,如果修改一个列表的元素,那么对应的另外一个列表的元素也改变<br>list14 = [2, 3, 4]<br>list15 = list14 # 内存地址相同</p>\n<p><strong>值传递</strong></p>\n<p>在列表中修改一个元素的值时,对应的另外一个列表中的值是不发生改变的<br>list16 = [1, 2, 3, 4]<br>list17 = list16[:] # 内存地址不同<br>list17 = list16.copy() # 内存地址不同</p>\n<h2 id=\"9-元组\"><a href=\"#9-元组\" class=\"headerlink\" title=\"9.元组\"></a>9.元组</h2><p>有序集合, 不可修改<br>创建一个空的元组 tupel1 = ()<br>tuple1 = (4, ) # 定义只有一个参数的元组</p>\n<h2 id=\"10-字典\"><a href=\"#10-字典\" class=\"headerlink\" title=\"10.字典\"></a>10.字典</h2><p>无序集合, key唯一,必须是不可变类型<br>访问获取方式: </p>\n<pre><code>dict[key]\ndict.get(key)\n</code></pre><p>添加元素:<br>    dict[key] = value # key为原字典中不存在的键<br>修改:<br>    dict[key] = balue # key为原字典中存在的键<br>dict.keys() 以列表返回字典中所有的键<br>dict.values() 以列表返回字典中所有的值<br>dict.items() 以列表返回可遍历的(键, 值) 元组数组<br>dict.setdefault() 返回指定键的值,如果键不存在于字典中，将会添加键并将值设为默认值<br>dict.pop([key]) 删除指定键值对, 需传入参数 # 没有remove()方法<br>enumerate()用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p>\n<h2 id=\"11-set-集合\"><a href=\"#11-set-集合\" class=\"headerlink\" title=\"11.set 集合\"></a>11.set 集合</h2><p>1.set是无序<br>2.set集合是不可改变的<br>3.创建一个空的集合 set1 = set(());set1 = set([]);set1 = set({})<br>set.add(): 增加一个元素(重复元素不能添加) # 没有append()方法<br>set.remove():删除元素, 参数是元素<br>set.pop():删除最后一个元素<br>set1 &amp; set2 交集<br>set1 | set2 并集<br>set1 - set2 差集<br>set1 ^ set2 交并集</p>\n<h2 id=\"12-数据类型转换\"><a href=\"#12-数据类型转换\" class=\"headerlink\" title=\"12.数据类型转换\"></a>12.数据类型转换</h2><p>dict-&gt;set 取字典的键, 传入集合<br>set3 = {‘a’:1, ‘b’:2, ‘c’:3} 这是一个字典<br>set –&gt; dict(错误) # 不能将集合转换成字典, 只有键, 没有值</p>\n<h2 id=\"13-函数参数\"><a href=\"#13-函数参数\" class=\"headerlink\" title=\"13.函数参数\"></a>13.函数参数</h2><ol>\n<li>不定长参数: *args</li>\n<li>关键字参数: **kw</li>\n<li>匿名函数: 关键字 lambda eg: sum = lambda x: x ** x</li>\n<li>偏函数: 导入模块 import functools<pre><code>functools.partical()就是创建一个新的函数.不需要自行定义函数.直接将结果赋值给一个变量,而          这个变量就是一个函数.这个函数的目的是将默认参数给固定住\n</code></pre></li>\n<li>回调函数: 定义函数时,将函数名作为参数传递过来,然后在函数里边再次调用函数</li>\n</ol>\n<h2 id=\"14-文件操作\"><a href=\"#14-文件操作\" class=\"headerlink\" title=\"14.文件操作\"></a>14.文件操作</h2><h3 id=\"Python3-File-文件-方法\"><a href=\"#Python3-File-文件-方法\" class=\"headerlink\" title=\"Python3 File(文件)方法\"></a>Python3 File(文件)方法</h3><p>open(path_name[, mode[, buffering]]) 打开文件 参数二:默认只读<br>fileObject.read([size]) 从文件读取指定的字节数，如果未给定或为负则读取所有。<br>fileObject.write() 写文件 # 如果要写入字符串以外的数据,先将他转换为字符串<br>fileObject.close() 关闭文件<br>fileObject.readline([size]) 读取整行内容,包括\\n字符, 如果给定参数则从文件开始读取指定的字符个数<br>fileObject.readlines([sizeint]) 读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。<br>f.tell() 返回一个整数,表示当前文件指针的位置(就是到文件头的比特数).<br>f.seek(偏移量,[起始位置]) 用来移动文件指针 #偏移量:单位:比特,可正可负起始位置:0-文件头,默认值;1-当前位置;2-文件尾<br>for line in f: print(line) 通过迭代器访问<br>with open(pathname, mode) as f<br>​<br>示列详见菜鸟教程Python3 File(文件)方法<br><a href=\"http://www.runoob.com/python3/python3-file-methods.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python3/python3-file-methods.html</a></p>\n<p>StringIO<br>from io import StringIO<br>f = StringIO([str]) 初始化, 然后像file一样读写<br>在内存中读写str, 使用StringIO会比在文件中操作内容速度快</p>\n<p>ByteIO<br>from io import BytesIO<br>f = ByteIO([b’\\xe4\\xb8\\xad\\xe6\\x96\\x87’]) 初始化,然后像文件一样读写<br>在内存中读写二进制数据</p>\n<p>总结 ：StringIO和BytesIO是在内存中操作str和bytes的方法，使得和读写文件具有一致的接口。</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>r</th>\n<th>r+</th>\n<th>w</th>\n<th>w+</th>\n<th>a</th>\n<th>a+</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>读</td>\n<td>+</td>\n<td>+</td>\n<td></td>\n<td>+</td>\n<td></td>\n<td>+</td>\n</tr>\n<tr>\n<td>写</td>\n<td></td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n</tr>\n<tr>\n<td>创建</td>\n<td></td>\n<td></td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n</tr>\n<tr>\n<td>覆盖</td>\n<td></td>\n<td></td>\n<td>+</td>\n<td>+</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>指针在开始</td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>指针在结尾</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>+</td>\n<td>+</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Python-OS-文件-目录方法\"><a href=\"#Python-OS-文件-目录方法\" class=\"headerlink\" title=\"Python OS 文件/目录方法\"></a>Python OS 文件/目录方法</h3><p>os.getcwd() 返回当前的工作目录 # 获取绝对路径<br>os.listdir(path) 返回指定的文件夹包含的文件或文件夹的名字的列表<br>os.mkdir(path) 在当前目录下创建新的目录<br>os.rmdir(path) 删除目录, 只能删除空目录<br>os.rename(src, dst) 对文件进行重命名<br>os.stat(file) 获取文件属性<br>os.remove(file) 删除文件 #可以将本文件删除<br>os.path.join(path1, path2) 路径拼接<br>os.path.split(path) 拆分路径 # 返回一个元组(目录, 最后一个文件/目录名称)<br>os.path.splitext(path) 获取文件的或站名<br>os.path.exists(path) 判断文件/目录是否存在<br>os.path.isfile(path) 判断是否是文件<br>os.path.getsize(file) 获取文件的大小<br>os.path.dirname(path) 获取当前文件的目录<br>os.path.basename(path) 获取当前文件/目录名<br>示列网址:<a href=\"http://www.runoob.com/python/os-file-methods.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python/os-file-methods.html</a></p>\n<h2 id=\"15-作用域\"><a href=\"#15-作用域\" class=\"headerlink\" title=\"15.作用域\"></a>15.作用域</h2><p>一旦在函数内部设置为global,则该变量全局有效</p>\n<h2 id=\"16-装饰器\"><a href=\"#16-装饰器\" class=\"headerlink\" title=\"16.装饰器\"></a>16.装饰器</h2><p>本质还是函数,  一般使用装饰器来装饰其他函数.本身还是函数的调用<br>@property<br>@属性名.setter<br>广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。</p>\n<h2 id=\"17-日期和时间\"><a href=\"#17-日期和时间\" class=\"headerlink\" title=\"17.日期和时间\"></a>17.日期和时间</h2><h3 id=\"time-时间\"><a href=\"#time-时间\" class=\"headerlink\" title=\"time(时间)\"></a>time(时间)</h3><p>time.localtime()  获取本地时间<br>time.asctime() / time.ctime() 将时间转换成用户可读时间, 返回str格式  (Thu Apr 19 23:02:35 2018)<br>time.strftime(‘%Y-%m-%d %X’) 字符串的格式化输出, 返回str格式 2018-04-19 23:07:51<br>time.strptime(timeObject, ‘%Y-%m-%d %X’)  # 将字符串的时间格式转换成元祖类型的时间格式     </p>\n<h3 id=\"datetime-日期\"><a href=\"#datetime-日期\" class=\"headerlink\" title=\"datetime(日期)\"></a>datetime(日期)</h3><p>datetime.datetime.now() 获取当前时间<br>datetime.datetime(2020, 2, 2, 20, 20, 20) 获取指定的时间<br>date1.strftime(‘%Y-%m-%d %X’)  时间字符串的格式化输出, 返回str格式</p>\n<h3 id=\"calendar-日历\"><a href=\"#calendar-日历\" class=\"headerlink\" title=\"calendar(日历)\"></a>calendar(日历)</h3><p>calendar.month(2018, 4) 获取指定的月份日历<br>calendar.calendar(2018) 获取指定的年份日历</p>\n<p>更多时间日期方法想见网址:<a href=\"http://www.runoob.com/python/python-date-time.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python/python-date-time.html</a></p>\n<h3 id=\"csv文件\"><a href=\"#csv文件\" class=\"headerlink\" title=\"csv文件\"></a>csv文件</h3><p>csv是跨多种形式的导入导出的标准格式 比如: mysql excel<br>它是一种一纯文本形式来存储数据.文件中的每一行代表一条数据.每条记录包含逗号分隔</p>\n<h2 id=\"18-部分模块\"><a href=\"#18-部分模块\" class=\"headerlink\" title=\"18.部分模块\"></a>18.部分模块</h2><p>import keyword 标志符 查看所有关键字<br>import functools 偏函数<br>import collections </p>\n<pre><code>collections.deque方法可以创建一个两端都可以操作的列表,也就是说我们可以在两端进行添加和删除\n</code></pre><p>from types import MethodType<br>    MethodType() 动态添加方法到类或对象实例中</p>\n","categories":[{"name":"Python","slug":"Python","count":2,"path":"api/categories/Python.json"}],"tags":[{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"}]}