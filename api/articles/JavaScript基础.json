{"title":"JavaScript基础","slug":"JavaScript基础","date":"2018-05-26T08:19:00.000Z","updated":"2018-05-26T09:36:57.506Z","comments":true,"path":"api/articles/JavaScript基础.json","photos":[],"link":"","excerpt":"JavaScript​    ECMAScript - 语法规范 - ES5                (ECMA欧洲计算机制造商协会)​    BOM - Browser Object Model - 浏览器对象模型 - window​    DOM - Document Object Model - 文档对象模型 - document编程范式(理念)面向对象编程函数式编程层叠样式表前置, JS后置外部脚本不能包含  标签。 document.getElementById(“some id”) 。这个方法是 HTML DOM 中定义的, 是用于访问 HTML 元素的正式 W3C 标准<br>x.innerHTML=”Hello JavaScript”;    //改变内容","covers":null,"content":"<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p>​    <strong>ECMAScript</strong> - 语法规范 - ES5                (ECMA欧洲计算机制造商协会)</p>\n<p>​    <strong>BOM</strong> - Browser Object Model - 浏览器对象模型 - window</p>\n<p>​    <strong>DOM</strong> - Document Object Model - 文档对象模型 - document</p>\n<p>编程范式(理念)</p>\n<ul>\n<li>面向对象编程</li>\n<li>函数式编程</li>\n</ul>\n<p>层叠样式表前置, JS后置</p>\n<p>外部脚本不能包含 <script> 标签。</p>\n<p> <strong>document.getElementById(“some id”)</strong> 。这个方法是 HTML DOM 中定义的, 是用于访问 HTML 元素的正式 W3C 标准<br>x.innerHTML=”Hello JavaScript”;    //改变内容</p>\n<a id=\"more\"></a>\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3><p><strong>JavaScript 显示数据</strong></p>\n<p>JavaScript 可以通过不同的方式来输出数据：</p>\n<ul>\n<li>使用 <strong>window.alert()</strong> 弹出警告框。   alert() 方法用于显示带有一条指定消息和一个 <strong>确认</strong> 按钮的警告框。</li>\n<li>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</li>\n<li>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</li>\n<li>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</li>\n</ul>\n<p><strong>操作 HTML 元素</strong></p>\n<p>如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(<em>id</em>) 方法。</p>\n<p>请使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容：</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>JavaScript 使用关键字 <strong>var</strong> 来定义变量， 使用等号来为变量赋值</p>\n<p>JavaScript 对大小写是敏感的</p>\n<p>分号用于分隔 JavaScript 语句。通常我们在每条可执行的语句结尾添加分号。使用分号的另一用处是在一行中编写多条语句。</p>\n<p>在<u>文本字符串中</u>使用反斜杠对代码行进行换行</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>单行注释以 // 开头</p>\n<p>多行注释以 /<em> 开始，以 </em>/ 结尾</p>\n<h3 id=\"数据类型和变量\"><a href=\"#数据类型和变量\" class=\"headerlink\" title=\"数据类型和变量\"></a>数据类型和变量</h3><p><u>简单数据类型</u>:<code>字符串（String）</code> 、<code>数字(Number)</code> 、<code>布尔(Boolean)</code> 、<code>数组(Array)</code> 、</p>\n<p><code>空（Null）</code> 、<code>未定义（Undefined）</code> </p>\n<p><u>复杂数据类型</u>: <code>对象(Object)</code> </p>\n<p>当声明新变量时，可以使用关键词 “new” 来声明其类型：</p>\n<p>JavaScript中有隐式的类型转换</p>\n<p><code>==</code>比较，它会自动转换数据类型再比较</p>\n<p><code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回<code>false</code>，如果一致，再比较。</p>\n<p> <code>===(全等于/严格等)</code>    <code>!==(严格不等)</code></p>\n<p>逻辑运算符: </p>\n<p>&amp;&amp;(短路与)            只有所有都为true，&amp;&amp;运算结果才是true，第一个为false后面的不再判断</p>\n<p>||(短路或)            只要其中有一个为true，||运算结果就是true，第一个为true后面的不再判断</p>\n<p>! (非)</p>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><h4 id=\"局部作用域\"><a href=\"#局部作用域\" class=\"headerlink\" title=\"局部作用域\"></a>局部作用域</h4><p>变量在函数内声明，变量为局部作用域。</p>\n<p>局部变量：只能在函数内部访问。</p>\n<h4 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h4><p>变量在函数外定义，即为全局变量。</p>\n<p>全局变量有 <strong>全局作用域</strong> : 网页中所有脚本和函数均可使用。 </p>\n<p><u>如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</u></p>\n<h4 id=\"JavaScript-变量生命周期\"><a href=\"#JavaScript-变量生命周期\" class=\"headerlink\" title=\"JavaScript 变量生命周期\"></a>JavaScript 变量生命周期</h4><p>JavaScript 变量生命周期在它声明时初始化。</p>\n<p>局部变量在函数执行完毕后销毁。</p>\n<p>全局变量在页面关闭后销毁。</p>\n<h3 id=\"JavaScript全局函数\"><a href=\"#JavaScript全局函数\" class=\"headerlink\" title=\"JavaScript全局函数\"></a>JavaScript全局函数</h3><p>isNaN() - 是不是不是一个数</p>\n<p>parseInt() - 取整数如果取不出返回NaN</p>\n<p>parseFloat() - 取小数如果取不出返回NaN</p>\n<p>isFinite() - 是不是有限数值</p>\n<p>eval() - 非常强大的函数 evaluate - XSS(跨站脚本攻击)</p>\n<p>encodeURIComponent() - 处理成百分号编码</p>\n<p>decodeURIComponent() - 将百分号编码解码还原</p>\n<h3 id=\"Date-对象\"><a href=\"#Date-对象\" class=\"headerlink\" title=\"Date 对象\"></a>Date 对象</h3><p>创建 Date 对象： new Date() </p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getFullYear()</td>\n<td>从 Date 对象以四位数字返回年份</td>\n</tr>\n<tr>\n<td>getMonth()</td>\n<td>从 Date 对象返回月份 (0 ~ 11)</td>\n</tr>\n<tr>\n<td>getDate()</td>\n<td>从 Date 对象返回一个月中的某一天 (1 ~ 31)</td>\n</tr>\n<tr>\n<td>getDay()</td>\n<td>从 Date 对象返回一周中的某一天 (0 ~ 6)</td>\n</tr>\n<tr>\n<td>getHours()</td>\n<td>返回 Date 对象的小时 (0 ~ 23)</td>\n</tr>\n<tr>\n<td>getMinutes()</td>\n<td>返回 Date 对象的分钟 (0 ~ 59)</td>\n</tr>\n<tr>\n<td>getSeconds()</td>\n<td>返回 Date 对象的秒数 (0 ~ 59)</td>\n</tr>\n</tbody>\n</table>\n<p>trim() 函数用于去除字符串两端的空白字符</p>\n<p><strong>parseInt()</strong>   将字符串转换成整数,提取数字</p>\n<p>disabled</p>\n<p>.onclick</p>\n<p>绑定与反绑定</p>\n<p>递归定义 - - 定义的左边和定义的右边出现了相同的概念</p>\n<p>递归调用 - - 函数直接或间接的调用了自身</p>\n<ol>\n<li>收敛条件 - 什么时候就不用递归了 </li>\n<li>递归公式</li>\n</ol>\n<p>全排列</p>\n<p>迷宫寻路</p>\n<p>==卡特兰数==</p>\n<h3 id=\"window对象\"><a href=\"#window对象\" class=\"headerlink\" title=\"window对象\"></a>window对象</h3><p><strong>alert()</strong>          浏览器弹出带有一段消息和一个确认按钮的警告框</p>\n<p><strong>prompt()</strong>    显示可提示用户输入的对话框</p>\n<p>confirm()    显示带有一段消息以及确认按钮和取消按钮的对话框</p>\n<p>open()          打开一个新的浏览器窗口或查找一个已命名的窗口</p>\n<p>close()        关闭浏览器窗口</p>\n<p><strong>setTimeout()</strong>  在指定的毫秒数后调用函数或计算表达式</p>\n<p><strong>setInterval()</strong>    按照指定的周期（以毫秒计）来调用函数或计算表达式</p>\n<p>clearTimeout()     取消由 setTimeout() 方法设置的 timeout</p>\n<p> clearInterval()    取消由 setInterval() 设置的 timeout</p>\n<p>moveTo()      把窗口的左上角移动到一个指定的坐标</p>\n<p>moveBy()    可相对窗口的当前坐标把它移动指定的像素</p>\n<p>resizeBy()    按照指定的像素调整窗口的大小</p>\n<h4 id=\"window对象属性\"><a href=\"#window对象属性\" class=\"headerlink\" title=\"window对象属性\"></a>window对象属性</h4><p><strong>location</strong> - 用于窗口或框架的 Location 对象</p>\n<p>属性:</p>\n<p>location.href        设置或返回当前显示的文档的完整 URL</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.write(location.href);</span><br></pre></td></tr></table></figure>\n<p>Location 对象方法:</p>\n<p>assign()    载入一个新的文档       // window.location.assign(<em>URL</em>)</p>\n<p>reload()    重新载入当前文档      // location.reload();</p>\n<p>replace()    用新的文档替换当前文档    // location.replace(<em>newURL</em>)</p>\n<p>history - go() / fofward / back</p>\n<p>screen  = avaiwidth / avaiHeight </p>\n<h3 id=\"Document-对象\"><a href=\"#Document-对象\" class=\"headerlink\" title=\"Document 对象\"></a>Document 对象</h3><p><strong>查找元素的方法</strong></p>\n<ul>\n<li>getElementById()    返回对拥有指定 id 的第一个对象的引用</li>\n</ul>\n<ul>\n<li>getElementsByTagName()    返回带有指定标签名的对象集合</li>\n</ul>\n<ul>\n<li>getElementsByClassName()    返回文档中所有指定类名的元素集合</li>\n</ul>\n<ul>\n<li>querySelector()    根据指定的选择器查找单个元素</li>\n</ul>\n<ul>\n<li>querySelectorAll()    根据指定的选择器查找所有元素</li>\n</ul>\n<p><strong>绑定事件与取消绑定</strong></p>\n<ul>\n<li>document.addEventListener() 方法用于向文档添加事件句柄 </li>\n<li>document.removeEventListener() 方法来移除 addEventListener() 方法添加的事件句柄 </li>\n<li>element.addEventListener() 方法为指定元素添加事件句柄 </li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.addEventListener(event, function)</span><br></pre></td></tr></table></figure>\n<p>​    - event    必需。描述事件名称的字符串。’click’ - 当用户点击某个对象时调用的事件句柄 </p>\n<p>​    - function      必需。描述了事件触发后执行的函数 </p>\n<p><strong>修改节点的内容和属性</strong></p>\n<ul>\n<li>textContent / innerHTML / nodeValue</li>\n</ul>\n<p><strong>访问成员运算符</strong> </p>\n<ul>\n<li>setAttribute() / getAttribute() / removeAttribute()</li>\n</ul>\n<p>创建新节点 - ()<br>追加新的子节点 - appendChild() / insertBefore()<br>删除子节点 - removeChild()</p>\n<p>如果已经获得一个节点 如何访问它的父节点、子节点、兄弟节点<br>parentNode<br>children / firstChild / lastChild<br>nextSibling / prevSibling</p>\n<h4 id=\"DOM事件对象\"><a href=\"#DOM事件对象\" class=\"headerlink\" title=\"DOM事件对象\"></a>DOM事件对象</h4><p><strong>鼠标事件</strong> </p>\n<p>onmousedown    鼠标按钮被按下</p>\n<p>target 事件属性可返回事件的目标节点（触发该事件的节点），如生成事件的元素、文档或窗口</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event.target</span><br></pre></td></tr></table></figure>\n<p>事件捕获 - 从外向里传播事件</p>\n<p>事件冒泡 - 从里向外传播事件</p>\n<h3 id=\"jQuery\"><a href=\"#jQuery\" class=\"headerlink\" title=\"jQuery\"></a>jQuery</h3><p> <strong>jQuery的$函数的作用:</strong></p>\n<p>1、    $(function() {}) -  \\$函数中传入的参数是一个函数作用: 绑定页面加载完成之后要执行的回调函数</p>\n<p>2、    $(selector) -  \\$函数中传入的参数是一个选择器</p>\n<p>​    作用: 通过选择器获得对应的元素并将其处理成jQuery对象jQuery对象本质是一个数组</p>\n<p>​    如果需要将jQuery对象还原成原生的JS对象一[index]/get(index)</p>\n<p>3、    $(elem) -  \\$函数中传入的参数是原生JS对象</p>\n<p>​    作用: 将原生JS对象转换成jQuery对象(更多的属性更多的方法)</p>\n<p>4、    $(tag) - \\$函数中传入的参数是一个标签</p>\n<p>​    作用:  和标签对应的元素(得到的是jQuery对身)</p>\n<p>通过jQuery对象的方法可以用更少的代码做更多的事情</p>\n<p>在写代码的时候不需要考虑浏览器兼容性问题(jQuery已经做了处理）</p>\n<p>引入多个JS库出现冲突时可以通过下面的方式让出$函数</p>\n<p>​    jQuery.noConfict() ;</p>\n<p>让出$函数以后原来用\\$函数的地方全部换成jQuery</p>\n<p>查找元素</p>\n<ul>\n<li>选择器<ul>\n<li>* / element / #id / .class / selector1, selector2</li>\n<li>ancestor descendant / parent&gt;child / previous+next / previous~siblings </li>\n</ul>\n</li>\n<li>筛选器<ul>\n<li>基本筛选器：:not(selector) / :first / :last / :even / :odd / :eq(index) / :gt(index) / :lt(index) / :animated / :focus</li>\n<li>内容筛选器：:contains(‘…’) / :empty / :parent / :has(selector)</li>\n<li>可见性筛选器：:hidden / :visible</li>\n<li>子节点筛选器：:nth-child(expr) / :first-child / :last-child / :only-child</li>\n<li>属性筛选器：[attribute] / [attribute=’value’] / [attribute!=’value’] / [attribute^=’value’] / [attribute$=’value’] / [attribute|=’value’] / [attribute~=’value’]</li>\n</ul>\n</li>\n<li>表单： :input / :text / :password / :radio / :checkbox / :submit / :image / :reset / :button / :file / :selected / :enabled / :disabled / :checked</li>\n</ul>\n<p>执行操作</p>\n<ul>\n<li>内容操作<ul>\n<li>获取/修改内容：html() / text() / replaceWith() / remove()</li>\n<li>获取/设置元素：before() / after() / prepend() / append() / remove() / clone() / unwrap() / detach() / empty() / add()</li>\n<li>获取/修改属性：attr() / removeAttr() / addClass() / removeClass() / css()</li>\n<li>获取/设置表单值：val()</li>\n</ul>\n</li>\n<li>查找操作<ul>\n<li>查找方法：find() /  parent() / children() / siblings() / next() / nextAll() / prev() / prevAll()</li>\n<li>筛选器：filter() / not() / has() / is() / contains()</li>\n<li>索引编号：eq()</li>\n</ul>\n</li>\n<li>尺寸和位置<ul>\n<li>尺寸相关：height() / width() / innerHeight() / innerWidth() / outerWidth() / outerHeight()</li>\n<li>位置相关：offset() / position() / scrollLeft() / scrollTop()</li>\n</ul>\n</li>\n<li>特效和动画<ul>\n<li>基本动画：show() / hide() / toggle()</li>\n<li>消失出现：fadeIn() / fadeOut() / fadeTo() / fadeToggle()</li>\n<li>滑动效果：slideDown() / slideUp() / slideToggle()</li>\n<li>自定义：delay() / stop() / animate()</li>\n</ul>\n</li>\n<li>事件<ul>\n<li>文档加载：ready() / load()</li>\n<li>用户交互：on() / off()</li>\n</ul>\n</li>\n</ul>\n<p><strong>回调函数</strong> </p>\n<p>evt参数代表的是事件对象 - 绑定了和事件相关的所有信息</p>\n<p>如果事件回调函数中要用到和事件相关的属性和方法就最好指定evt参数</p>\n<ul>\n<li>target / clientX / button / keyCode</li>\n<li>preventDefault() / stopPropagation()</li>\n</ul>\n<p>不管函数是否指定了evt参数当事件发生回调该函数时都会传入该参数</p>\n<p>调构造函数 前面加new</p>\n<p>数组里删元素要从后往前循环</p>\n<h3 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h3><p>原生Ajax - Asynchronous JavaScript and XML</p>\n<p>让浏览器向服务器发出异步请求(非阻塞式请求)，等服务器返回了响应数据(JSON/XML)后就可以对页面进行局部刷</p>\n<p>新，这样就可以在不中断用户体验的前提下刷新页面数据</p>\n<ul>\n<li>JavaScript发送HTTP请求获取数据默认只支持同源数据(同源策略)</li>\n<li><a href=\"http://www.abc.com/index.html\">http://www.abc.com/index.html</a>  -&gt; JavaScript</li>\n<li>如果要跨域取数据是需要对方提供数据的服务器支持的</li>\n<li>JSONP / 服务器端设置支持跨域取数据(RESTful)</li>\n</ul>\n</script></p>","categories":[{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JS","slug":"JS","count":1,"path":"api/tags/JS.json"}]}