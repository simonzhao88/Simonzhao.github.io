{"title":"将django项目部署到CentOS服务器上","slug":"将django项目部署到CentOS服务器上","date":"2018-06-04T12:24:15.000Z","updated":"2018-06-25T09:12:59.710Z","comments":true,"path":"api/articles/将django项目部署到CentOS服务器上.json","photos":[],"link":"","excerpt":"将django项目部署到CentOS服务器上安装mariadb安装命令<br>1<br>yum -y install mariadb mariadb-server<br>安装完成MariaDB，首先启动MariaDB1<br>systemctl start mariadb<br>设置开机启动<br>1<br>systemctl enable mariadb<br>","covers":["/2018/06/04/将django项目部署到CentOS服务器上/django_centos_nginx.png","/2018/06/04/将django项目部署到CentOS服务器上/django_centos_project_mulu.png","/2018/06/04/将django项目部署到CentOS服务器上/django_centos_nginx_peizhi.png"],"content":"<h1 id=\"将django项目部署到CentOS服务器上\"><a href=\"#将django项目部署到CentOS服务器上\" class=\"headerlink\" title=\"将django项目部署到CentOS服务器上\"></a>将django项目部署到CentOS服务器上</h1><h3 id=\"安装mariadb\"><a href=\"#安装mariadb\" class=\"headerlink\" title=\"安装mariadb\"></a>安装mariadb</h3><p>安装命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install mariadb mariadb-server</span><br></pre></td></tr></table></figure></p>\n<p>安装完成MariaDB，首先启动MariaDB</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mariadb</span><br></pre></td></tr></table></figure>\n<p>设置开机启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable mariadb</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"设置密码\"><a href=\"#设置密码\" class=\"headerlink\" title=\"设置密码\"></a>设置密码</h3><p>命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql_secure_installation</span><br><span class=\"line\"></span><br><span class=\"line\">Enter current password for root:&lt;–初次运行直接回车</span><br></pre></td></tr></table></figure></p>\n<p>设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Set root password? [Y/n] &lt;– 是否设置root用户密码，输入y并回车或直接回车</span><br><span class=\"line\"></span><br><span class=\"line\">New password: &lt;– 设置root用户的密码</span><br><span class=\"line\">Re-enter new password: &lt;– 再输入一次你设置的密码</span><br></pre></td></tr></table></figure></p>\n<p>其他配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，回车</span><br><span class=\"line\"></span><br><span class=\"line\">Disallow root login remotely? [Y/n] &lt;–是否禁止root远程登录,回车,</span><br><span class=\"line\"></span><br><span class=\"line\">Remove test database and access to it? [Y/n] &lt;– 是否删除test数据库，回车</span><br><span class=\"line\"></span><br><span class=\"line\">Reload privilege tables now? [Y/n] &lt;– 是否重新加载权限表，回车</span><br></pre></td></tr></table></figure></p>\n<p>初始化MariaDB完成，接下来测试登录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开启远程连接\"><a href=\"#开启远程连接\" class=\"headerlink\" title=\"开启远程连接\"></a>开启远程连接</h3><p>在mysql数据库中的user表中可以看到默认是只能本地连接的，所有可以添加一个新的用户，该用户可以远程访问</p>\n<p><strong>1. 创建用户</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 先使用数据库</span><br><span class=\"line\">use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\"># 针对ip</span><br><span class=\"line\">create user &apos;root&apos;@&apos;192.168.10.10&apos; identified by &apos;password&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">#全部</span><br><span class=\"line\"> create user &apos;root&apos;@&apos;%&apos; identified by &apos;password&apos;;</span><br><span class=\"line\">2. 授权</span><br><span class=\"line\"># 给用户最大权限</span><br><span class=\"line\">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;password&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 给部分权限(test 数据库)</span><br><span class=\"line\"></span><br><span class=\"line\">grant all privileges on test.* to &apos;root&apos;@&apos;%&apos; identified by &apos;password&apos; with grant option;</span><br><span class=\"line\"></span><br><span class=\"line\"># 刷新权限表</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看</span><br><span class=\"line\">show grants for &apos;root&apos;@&apos;localhost&apos;;</span><br><span class=\"line\">接下来就可以在远程的数据库可视化工具中直接访问该服务器中的mysql了。</span><br><span class=\"line\"></span><br><span class=\"line\"># 访问数据库</span><br><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装python3-6\"><a href=\"#安装python3-6\" class=\"headerlink\" title=\"安装python3.6\"></a>安装python3.6</h3><p>在centos中，系统默认只提供python2.7的版本，但是项目我们使用的python3.6的版本。所有我们自己安装python3</p>\n<p><strong>安装Python3的方法</strong><br>首先安装依赖包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">yum -y groupinstall &quot;Development tools&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure></p>\n<p>然后根据自己需求下载不同版本的Python3，我下载的是Python3.6.2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz</span><br></pre></td></tr></table></figure>\n<p>然后解压压缩包，进入该目录，安装Python3<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvJf  Python-3.6.2.tar.xz</span><br><span class=\"line\">cd Python-3.6.2</span><br><span class=\"line\">./configure --prefix=/usr/local/python3</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p>\n<p>最后创建软链接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br><span class=\"line\"></span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><p><strong>1. 安装virtualenv</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-virtualenv</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. 创建虚拟环境</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv --no-site-packages env</span><br><span class=\"line\"></span><br><span class=\"line\">cd env</span><br><span class=\"line\"></span><br><span class=\"line\"># 激活虚拟环境</span><br><span class=\"line\">source bin/activate</span><br></pre></td></tr></table></figure></p>\n<p><strong>3. 安装环境需要的包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -r re_install.txt</span><br><span class=\"line\"></span><br><span class=\"line\">其中re_install.txt文件中记录的是需要安装包的名称以及对应的版本</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><p>该部署采用的是cenots7系统来部署</p>\n<p>Django的项目中，在工程目录下settings.py文件中有一个DEBUG=True参数，如果DEBUG=False则会出现js,css，img无法加载的情况出现。</p>\n<p>原因如下：</p>\n<p>Django框架仅在开发模式下提供静态文件服务。当我开启DEBUG模式时，Django内置的服务器是提供静态文件的服务的，所以css等文件访问都没有问题，但是关闭DEBUG模式后，Django便不提供静态文件服务了。想一想这是符合Django的哲学的：这部分事情标准服务器都很擅长，就让服务器去做吧！</p>\n<p><strong>1. 测试环境中部署方式</strong><br>在测试环境中一般都直接使用python manage.py runserver的方式去运行项目。其中就涉及到DEBUG=False的修改，静态目录的修改等，具体修改如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">修改settings.py配置文件中的DEBUG=False模式，修改ALLOEWD_HOST=[&apos;*&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">修改工程目录下的urls.py</span><br><span class=\"line\"></span><br><span class=\"line\">from django.views.static import serve</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^admin/&apos;, admin.site.urls),</span><br><span class=\"line\">    url(r&apos;^axf/&apos;, include(&apos;axf.urls&apos;, namespace=&apos;axf&apos;)),</span><br><span class=\"line\"></span><br><span class=\"line\">\t# 增加以下的url路由</span><br><span class=\"line\">    url(r&apos;^static/(?P&lt;path&gt;.*)$&apos;, serve, &#123;&quot;document_root&quot;: settings.STATICFILES_DIRS[0]&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">    url(r&apos;^$&apos;, views.home)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. 正式环境中部署方式</strong><br>正式环境中部署为nginx+uwsgi来部署django项目</p>\n<p>2.1 安装nginx<br>a）添加nginx存储库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release</span><br></pre></td></tr></table></figure></p>\n<p>b) 安装nginx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure></p>\n<p>c) 运行nginx</p>\n<p>Nginx不会自行启动。要运行Nginx</p>\n<figure class=\"highlight plain\"><figcaption><span>start nginx```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">nginx的运行命令：</span><br></pre></td></tr></table></figure>\n<p> systemctl status nginx 查看nginx的状态<br> systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d）系统启动时启用Nginx</span><br><span class=\"line\"></span><br><span class=\"line\">```systemctl enable nginx</span><br></pre></td></tr></table></figure></p>\n<p>e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=http </span><br><span class=\"line\"></span><br><span class=\"line\">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class=\"line\"></span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下:</p>\n<p><img src=\"/2018/06/04/将django项目部署到CentOS服务器上/django_centos_nginx.png\" alt=\"图\"></p>\n<p><strong>3.配置uwsgi</strong></p>\n<p>3.1 安装uwsgi<br>pip3 install uwsgi<br>然后进行环境变量的配置， 建立软连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi</span><br></pre></td></tr></table></figure></p>\n<p><strong>4. 配置项目代码，配置项目nginx，配置uwsgi.ini等</strong><br>本案例的配置文件，都习惯将每一个项目的配置文件，日志文件，虚拟环境放在一起，这样开发方便，运维也方便维护</p>\n<p>项目的目录结构如下：</p>\n<p><img src=\"/2018/06/04/将django项目部署到CentOS服务器上/django_centos_project_mulu.png\" alt=\"图\"></p>\n<p>其中：</p>\n<p>conf是配置文件，用于存放项目的nginx.conf文件，uwsgi.ini文件</p>\n<p>logs是日志文件，用于存放nginx的启动成功和失败文件，以及uwsgi的运行日志文件</p>\n<p>env是用于存放虚拟环境</p>\n<p>src是项目文件，该目录下上传的是目录代码</p>\n<p>4.1 配置nginx.conf文件<br>首先：编写自己项目的nginx.conf文件如下：</p>\n<p>每一个项目对应有一个自己定义的nginx的配置文件，比如爱鲜蜂项目，我定义为axfnginx.conf文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">     listen       80;</span><br><span class=\"line\">     server_name 39.104.176.9 localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">     access_log /home/logs/access.log;</span><br><span class=\"line\">     error_log /home/logs/error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">     location / &#123;</span><br><span class=\"line\">         include uwsgi_params;</span><br><span class=\"line\">         uwsgi_pass 127.0.0.1:8890;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     location /static/ &#123;</span><br><span class=\"line\">         alias /home/src/axf/static/;</span><br><span class=\"line\">         expires 30d;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>其次：修改总的nginx的配置文件，让总的nginx文件包含我们自定义的项目的axfnginx.conf文件</p>\n<p>总的nginx配置文件在：/etc/nginx/nginx.conf中</p>\n<p><img src=\"/2018/06/04/将django项目部署到CentOS服务器上/django_centos_nginx_peizhi.png\" alt=\"图\"></p>\n<p>以上步骤操作完成以后，需要重启nginx：</p>\n<figure class=\"highlight plain\"><figcaption><span>restart nginx```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">如果自定义的axfnginx.conf文件没有错误的话，查看nginx的运行状态会有如下的结果：active</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">4.2 配置uwsgi文件</span><br><span class=\"line\">在conf文件夹下除了包含自定义的axfnginx.conf文件，还有我们定义的uwsgi.ini文件</span><br></pre></td></tr></table></figure>\n<p>[uwsgi]<br>projectname = axf<br>base = /home/src</p>\n<h1 id=\"守护进程\"><a href=\"#守护进程\" class=\"headerlink\" title=\"守护进程\"></a>守护进程</h1><p>master = true</p>\n<h1 id=\"进程个数\"><a href=\"#进程个数\" class=\"headerlink\" title=\"进程个数\"></a>进程个数</h1><p>processes = 4</p>\n<h1 id=\"虚拟环境\"><a href=\"#虚拟环境\" class=\"headerlink\" title=\"虚拟环境\"></a>虚拟环境</h1><p>pythonhome = /home/env/axfenv</p>\n<h1 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h1><p>chdir = %(base)/%(projectname)</p>\n<h1 id=\"指定python版本\"><a href=\"#指定python版本\" class=\"headerlink\" title=\"指定python版本\"></a>指定python版本</h1><p>pythonpath = /usr/local/python3/bin/python3</p>\n<h1 id=\"指定uwsgi文件\"><a href=\"#指定uwsgi文件\" class=\"headerlink\" title=\"指定uwsgi文件\"></a>指定uwsgi文件</h1><p>module = %(projectname).wsgi</p>\n<h1 id=\"和nginx通信地址-端口\"><a href=\"#和nginx通信地址-端口\" class=\"headerlink\" title=\"和nginx通信地址:端口\"></a>和nginx通信地址:端口</h1><p>socket = 127.0.0.1:8890</p>\n<h1 id=\"日志文件地址\"><a href=\"#日志文件地址\" class=\"headerlink\" title=\"日志文件地址\"></a>日志文件地址</h1><p>logto = /home/logs/uwsgi.log<br><code>`</code><br>运行项目:</p>\n<p>uwsgi –ini uwsgi.ini</p>\n","categories":[{"name":"Linux","slug":"Linux","count":4,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"}]}