{"title":"Django初识","slug":"Django的初识","date":"2018-05-10T07:01:50.000Z","updated":"2018-06-05T01:44:30.249Z","comments":true,"path":"api/articles/Django的初识.json","photos":[],"link":"","excerpt":"1.Django简介：Django发布于2005年7月，是当前Python世界里最有名且成熟的网络框架。 最初是被开发用于管理劳伦斯出版集团旗下的以新闻内容为主的网站的，即CMS(内容管理系统)软件。Django是一个用Python编写的开放源代码的Web应用框架，代码是开源的。此系统采用了MVC的框架模式, 也可以称为MTV模式具体介绍详见Django官网","covers":["/2018/05/10/Django的初识/./django1.jpg","/2018/05/10/Django的初识/./mvc.jpg"],"content":"<h3 id=\"1-Django简介：\"><a href=\"#1-Django简介：\" class=\"headerlink\" title=\"1.Django简介：\"></a>1.Django简介：</h3><p>Django发布于2005年7月，是当前Python世界里最有名且成熟的网络框架。 最初是被开发用于管理劳伦斯出版集团旗下的以新闻内容为主的网站的，即CMS(内容管理系统)软件。</p>\n<p>Django是一个用Python编写的开放源代码的Web应用框架，代码是开源的。此系统采用了MVC的框架模式, 也可以称为MTV模式</p>\n<p>具体介绍详见<a href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"noopener\">Django官网</a></p>\n<hr>\n<a id=\"more\"></a>\n<h3 id=\"2-什么是MVC\"><a href=\"#2-什么是MVC\" class=\"headerlink\" title=\"2.什么是MVC\"></a>2.什么是MVC</h3><p>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。 <strong>通俗的来讲就是，强制性的使应用程序的输入，处理和输出分开。</strong>通过控制器，将数据和显示分离，好处是同一个视图可以加载不同的模型，同一个模型也可以显示成不同的视图<br>稍具规模的系统都会使用MVC架构或者它的变体（MVP、MVVM等）。</p>\n<p><strong>它是对面向对象设计原则中迪米特法则的一个最好的践行</strong></p>\n<p><strong>核心思想</strong>：解耦</p>\n<p><strong>优点</strong>：减低各个模块之间的耦合性，方便变更，更容易重构代码，最大程度的实现了代码的重用</p>\n<p>MVC(Model, View, Controller) Model: 即数据存取层。用于封装于应用程序的业务逻辑相关的数据，以及对数据的处理。说白了就是模型对象负责在数据库中存取数据</p>\n<p>View: 即表现层。负责数据的显示和呈现。渲染的html页面给用户，或者返回数据给用户。</p>\n<p>Controller: 即业务逻辑层。负责从用户端收集用户的输入，进行业务逻辑处理，包括向模型中发送数据，进行CRUD操作。</p>\n<p><img src=\"/2018/05/10/Django的初识/./django1.jpg\" alt=\"\"></p>\n<p><img src=\"/2018/05/10/Django的初识/./mvc.jpg\" alt=\"mvc\"></p>\n<hr>\n<h3 id=\"3-Django的模式简介\"><a href=\"#3-Django的模式简介\" class=\"headerlink\" title=\"3.Django的模式简介\"></a>3.Django的模式简介</h3><p>严格来说，Django的模式应该是MVT模式，本质上和MVC没什么区别，也是各组件之间为了保持松耦合关系，只是定义上有些许不同。</p>\n<p>Model： 负责业务与数据库(ORM)的对象</p>\n<p>View： 负责业务逻辑并适当调用Model和Template</p>\n<p>Template: 负责把页面渲染展示给用户</p>\n<p>注意： Django中还有一个url分发器，也叫作路由。主要用于将url请求发送给不同的View处理，View在进行相关的业务逻辑处理。</p>\n<hr>\n<p>参考文章：<a href=\"https://github.com/simonzhao88/knowledge/blob/master/django/1.1django_pattern.md\" target=\"_blank\" rel=\"noopener\">DJANGO使用指南</a> 作者：<a href=\"https://github.com/coco369/knowledge\" target=\"_blank\" rel=\"noopener\">王海飞</a></p>\n","categories":[{"name":"Django","slug":"Django","count":3,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":3,"path":"api/tags/Django.json"}]}