{"title":"Django分页，中间件，验证码使用指南","slug":"django分页，中间件，验证码使用指南","date":"2018-05-26T10:20:55.000Z","updated":"2018-06-25T09:10:16.312Z","comments":true,"path":"api/articles/django分页，中间件，验证码使用指南.json","photos":[],"link":"","excerpt":"django分页，中间件，验证码使用指南前言在django中提供了很多的插件功能，有利于开发者快速开发，比如中间件，分页器等 还提供了Pillow库，可以进行生成图片，用于登录的验证码图书设计。1. 中间件Middleware中间件：<br>","covers":["/2018/05/26/django分页，中间件，验证码使用指南/./django_middleware_liucheng.png","/2018/05/26/django分页，中间件，验证码使用指南/./django_middleware_user_auth.png","/2018/05/26/django分页，中间件，验证码使用指南/./django_paginator.png","/2018/05/26/django分页，中间件，验证码使用指南/./django_paginator_daima.png"],"content":"<h1 id=\"django分页，中间件，验证码使用指南\"><a href=\"#django分页，中间件，验证码使用指南\" class=\"headerlink\" title=\"django分页，中间件，验证码使用指南\"></a>django分页，中间件，验证码使用指南</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在django中提供了很多的插件功能，有利于开发者快速开发，比如中间件，分页器等 还提供了Pillow库，可以进行生成图片，用于登录的验证码图书设计。</p>\n<h3 id=\"1-中间件Middleware\"><a href=\"#1-中间件Middleware\" class=\"headerlink\" title=\"1. 中间件Middleware\"></a>1. 中间件Middleware</h3><p><strong>中间件：</strong><br><a id=\"more\"></a><br>a) 是一个轻量级的，底层的插件，可以介入Django的请求和响应的过程（面向切面编程)</p>\n<p>b) 中间件的本质就是一个python类</p>\n<p>c) 面向切面编程(Aspect Oriented Programming)简称AOP，AOP的主要实现目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获取逻辑过程中各部分之间低耦合的隔离效果</p>\n<p><strong>思考：</strong></p>\n<p>什么是中间件？在settings.py中有很多的中间件，主要是用来做什么功能的呢，他们处理请求的url的过程在那些阶段呢，一般用来做那些数据的处理呢</p>\n<p>1.1 中间件的处理函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># __init__：没有参数，在服务器响应的第一个请求的时候自动调用，用户确定时候启动该中间件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># process_request(self, request): 在执行视图前被调用，每个请求上都会被调用，不主动进行返回或返回HttpResponse对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># process_view(self, request, view_func,view_args, view_kwargs):调用视图之前执行，每个请求都会调用，不主动进行返回或返回HttpResponse对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># process_template_response(self, request, response)：在视图刚好执行完后进行调用，每个请求都会调用，不主动进行返回或返回HttpResponse对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># process_response(self, request, response):所有响应返回浏览器之前调用，每个请求都会调用，不主动进行返回或返回HttpResponse对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># process_exception(self, request, exception):当视图抛出异常时调用，不主动进行返回或返回HttpResponse对象</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-2-处理流程\"><a href=\"#1-2-处理流程\" class=\"headerlink\" title=\"1.2 处理流程\"></a>1.2 处理流程</h3><p><img src=\"/2018/05/26/django分页，中间件，验证码使用指南/./django_middleware_liucheng.png\" alt=\"流程\"></p>\n<h3 id=\"1-3-自定义中间件流程\"><a href=\"#1-3-自定义中间件流程\" class=\"headerlink\" title=\"1.3 自定义中间件流程\"></a>1.3 自定义中间件流程</h3><p>a) 在工程目录下创建middleware目录</p>\n<p>b) 目录中创建一个python文件</p>\n<p>c) 在根据功能需求，创建切入需求类，重写切入点方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.utils.deprecation <span class=\"keyword\">import</span> MiddlewareMixin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthUserMiddleWare</span><span class=\"params\">(MiddlewareMixin)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    \tprint(‘xxxx’)</span><br></pre></td></tr></table></figure></p>\n<p>d) 启动中间件，在settings中进行配置，MIDDLEWARE中添加middleware.文件名.类名</p>\n<p><img src=\"/2018/05/26/django分页，中间件，验证码使用指南/./django_middleware_user_auth.png\" alt=\"图\"></p>\n<h2 id=\"2-分页\"><a href=\"#2-分页\" class=\"headerlink\" title=\"2.分页\"></a>2.分页</h2><h3 id=\"2-1-分页库Paginator的基本语法\"><a href=\"#2-1-分页库Paginator的基本语法\" class=\"headerlink\" title=\"2.1 分页库Paginator的基本语法\"></a>2.1 分页库Paginator的基本语法</h3><p>django提供了分页的工具，存在于django.core中<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Paginator： 数据分页工具</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Page：具体的某一页</span></span><br></pre></td></tr></table></figure></p>\n<p>Paginator：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#对象创建： Paginator(数据集，每一页数据)</span></span><br></pre></td></tr></table></figure></p>\n<p>属性：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># count  计算和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># num_pages: 页面总和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># page_range: 页码列表，从1开始</span></span><br></pre></td></tr></table></figure></p>\n<p>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">page(页码)：获取的一个page对象，页码不存在则抛出invalidPage的异常</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-常见错误\"><a href=\"#2-2-常见错误\" class=\"headerlink\" title=\"2.2 常见错误\"></a>2.2 常见错误</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># invalidPage：page()传递无效页码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PageNotAnInteger：Page()传递的不是整数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Empty:page()传递的值有效，但是没有数据</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-page对象\"><a href=\"#2-3-page对象\" class=\"headerlink\" title=\"2.3 page对象\"></a>2.3 page对象</h3><p>page：</p>\n<p>对象获取，通过Paginator的page()方法获得<br>属性：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># object_list: 当前页面上所有的数据对象</span></span><br><span class=\"line\"><span class=\"comment\"># number： 当前页的页码值</span></span><br><span class=\"line\"><span class=\"comment\"># paginator: 当前page关联的Paginator对象</span></span><br></pre></td></tr></table></figure></p>\n<p>方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># has_next()   判断是否有下一页</span></span><br><span class=\"line\"><span class=\"comment\"># has_previous():  判断是否有上一页</span></span><br><span class=\"line\"><span class=\"comment\"># has_other_pages():  判断是否有上一页或下一页</span></span><br><span class=\"line\"><span class=\"comment\"># next_page_number();  返回下一页的页码</span></span><br><span class=\"line\"><span class=\"comment\"># previous_page_number(): 返回上一页的页码</span></span><br><span class=\"line\"><span class=\"comment\"># len(): 返回当前也的数据的个数</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-4-Paginator对象和Page对象的关系\"><a href=\"#2-4-Paginator对象和Page对象的关系\" class=\"headerlink\" title=\"2.4 Paginator对象和Page对象的关系\"></a>2.4 Paginator对象和Page对象的关系</h3><p>如下有学生表，学生表中有25条数据，通过分页，每一个6条数据，去实现分页的功能</p>\n<p><img src=\"/2018/05/26/django分页，中间件，验证码使用指南/./django_paginator.png\" alt=\"图\"></p>\n<h3 id=\"2-5-代码\"><a href=\"#2-5-代码\" class=\"headerlink\" title=\"2.5 代码\"></a>2.5 代码</h3><p><img src=\"/2018/05/26/django分页，中间件，验证码使用指南/./django_paginator_daima.png\" alt=\"图\"></p>\n<h3 id=\"3-验证码\"><a href=\"#3-验证码\" class=\"headerlink\" title=\"3. 验证码\"></a>3. 验证码</h3><p>在用户登录，注册以及一些敏感操作的时候，我们为了防止服务器被暴力请求，或爬虫爬取，我们可以使用验证码进行过滤，减轻服务器的压力。</p>\n<p>验证码需要使用绘图Pillow<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pip install Pillow</span><br></pre></td></tr></table></figure></p>\n<p>核心：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image.ImageDraw.ImageFont</span><br></pre></td></tr></table></figure></p>\n<p>绘制流程：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background = (<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>)  RGB颜色</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化画布 </span></span><br><span class=\"line\">image = Image.new(‘RGB’,(<span class=\"number\">100</span>,<span class=\"number\">50</span>), background)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取画布中画笔对象</span></span><br><span class=\"line\">draw = ImageDraw.Draw(image, ‘RGB’)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘制验证码，随机四个</span></span><br><span class=\"line\"><span class=\"comment\"># 导入字体文件path表示路径</span></span><br><span class=\"line\">font = ImageFont.truetype(‘path’, size)                                                         </span><br><span class=\"line\">fontcolor = (<span class=\"number\">20</span>,<span class=\"number\">40</span>,<span class=\"number\">60</span>)</span><br><span class=\"line\">draw.text((x,y), ‘R’, font.fontcolor)  x,y是文字左上角坐标</span><br></pre></td></tr></table></figure></p>\n","categories":[{"name":"Django","slug":"Django","count":5,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":5,"path":"api/tags/Django.json"}]}