{"title":"Django中模型的关系设计(一)","slug":"Django中模型的关系设计","date":"2018-05-12T03:01:50.000Z","updated":"2018-07-14T09:02:06.040Z","comments":true,"path":"api/articles/Django中模型的关系设计.json","photos":[],"link":"","excerpt":"前言​    该文档中主要介绍模型的对应关系，一对一，一对多，以及多对多的关系。并且举例说明 模型对应关系描述如下： 1：1 一对一 OneToOneField 1：N 一对多 ForeignKey M：N 多对多 ManyToManyField 常见的几种数据关系，django都提供了很好的支持。","covers":null,"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>​    该文档中主要介绍模型的对应关系，一对一，一对多，以及多对多的关系。并且举例说明 模型对应关系描述如下： 1：1 一对一 OneToOneField 1：N 一对多 ForeignKey M：N 多对多 ManyToManyField 常见的几种数据关系，django都提供了很好的支持。</p>\n<a id=\"more\"></a>\n<h4 id=\"1-一对一\"><a href=\"#1-一对一\" class=\"headerlink\" title=\"1. 一对一\"></a>1. 一对一</h4><h5 id=\"1-1-模型\"><a href=\"#1-1-模型\" class=\"headerlink\" title=\"1.1 模型\"></a>1.1 模型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建学生的模型：</span><br><span class=\"line\">class Student(models.Model):</span><br><span class=\"line\">    stu_name = models.CharField(max_length=6, unique=True)</span><br><span class=\"line\">    stu_sex = models.BooleanField(default=0)</span><br><span class=\"line\">    stu_birth = models.DateField()</span><br><span class=\"line\">    stu_delete = models.BooleanField(default=0)</span><br><span class=\"line\">    stu_create_time = models.DateField(auto_now_add=True)</span><br><span class=\"line\">    stu_operate_time = models.DateField(auto_now=True)</span><br><span class=\"line\">    stu_tel = models.CharField(max_length=11)</span><br><span class=\"line\">    stu_yuwen = models.DecimalField(max_digits=3, decimal_places=1, default=0)</span><br><span class=\"line\">    stu_shuxue = models.DecimalField(max_digits=3, decimal_places=1, default=0)</span><br><span class=\"line\"></span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &apos;stu&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">创建学生拓展的模型：</span><br><span class=\"line\">class StuInfo(models.Model):</span><br><span class=\"line\"></span><br><span class=\"line\">    stu_addr = models.CharField(max_length=30)</span><br><span class=\"line\">    stu_age = models.IntegerField()</span><br><span class=\"line\">    stu = models.OneToOneField(Student)</span><br><span class=\"line\"></span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &apos;stu_info&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用models.OneToOneField()进行关联</span><br><span class=\"line\">class StuInfo(models.Model):下是通过班级获取学生信</span><br><span class=\"line\">    stu = models.OneToOneField(Student)</span><br><span class=\"line\">注意：在数据中关联字段名称叫stu_id</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-2-通过学生拓展表去获取学生信息\"><a href=\"#1-2-通过学生拓展表去获取学生信息\" class=\"headerlink\" title=\"1.2 通过学生拓展表去获取学生信息\"></a>1.2 通过学生拓展表去获取学生信息</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>stuinfo = StuInfo.objects.all().first()\nstudent = stuinfo.stu\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：通过拓展表去获取学生的信息的话，语法如下；</span><br><span class=\"line\">    学生拓展表的单条对象.关联字段，即可获取到学生表的数据</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"1-3-通过学生获取人信息1\"><a href=\"#1-3-通过学生获取人信息1\" class=\"headerlink\" title=\"1.3 通过学生获取人信息1\"></a>1.3 通过学生获取人信息1</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>stu = Student.objects.all().first()\nstuInfo = stu.stuInfo\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：通过学生获取关联表的数据的话，语法如下：</span><br><span class=\"line\">    学生对象.关联的表名，即可获取到关联表的数据</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"1-3-1-通过学生获取人信息2\"><a href=\"#1-3-1-通过学生获取人信息2\" class=\"headerlink\" title=\"1.3.1 通过学生获取人信息2\"></a>1.3.1 通过学生获取人信息2</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在关联字段OneToOneField中加入参数related_name=&apos;xxx&apos;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>在\nstu = Student.objects.all().first()\nstuInfo = stu.xxx\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：通过学生获取关联表的数据的话，语法如下：</span><br><span class=\"line\">    学生对象.关联的字段中定义的related_name参数，即可获取到关联表的数据</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"1-4-设置对应关系的字段为保护模式\"><a href=\"#1-4-设置对应关系的字段为保护模式\" class=\"headerlink\" title=\"1.4 设置对应关系的字段为保护模式 :\"></a>1.4 设置对应关系的字段为保护模式 :</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">models.CASCADE                      默认值</span><br><span class=\"line\">models.PROTECT\t                保护模式</span><br><span class=\"line\">models.SET_NULL                 置空模式</span><br><span class=\"line\">models.SET_DETAULT          置默认值</span><br><span class=\"line\">models.SET()     删除的时候吃重新动态指向一个实体访问对象元素</span><br><span class=\"line\">on_delete = models.PROTECT</span><br><span class=\"line\"></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<p>修改on_delete参数<br>models.OneToOneField(‘Student’, on_delete=models.SET_NULL, null=True)<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在删除student对象的时候，stuinfo的关联字段会设置为空null=True，如下命令去删除student的数据：</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>Student.objects.filter(id=1).delete()<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"1-5-定义on-delete-models-PROTECT\"><a href=\"#1-5-定义on-delete-models-PROTECT\" class=\"headerlink\" title=\"1.5 定义on_delete=models.PROTECT\"></a>1.5 定义on_delete=models.PROTECT</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p =  Student.objects.all().first()</span><br><span class=\"line\">p.delete()</span><br><span class=\"line\"></span><br><span class=\"line\">注意：这个时候去执行该业务逻辑的方法的时候会报错</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"2-一对多\"><a href=\"#2-一对多\" class=\"headerlink\" title=\"2. 一对多\"></a>2. 一对多</h4><h5 id=\"2-1-模型\"><a href=\"#2-1-模型\" class=\"headerlink\" title=\"2.1 模型\"></a>2.1 模型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>定义一个班级类还有学生类，实现一对多的关系：\n先定义班级类\nClass Grade(models.Model):\n    g_name = models.CharField(max_length=16)\n\n定义student\n    class Student:\n        s_name = models.CharField(max_length=10)\n        s_age = models.IntegerField(default=1)\n        s_grade = models.ForeignKey(Grade, on_delete=PROTECT)\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>注意：使用models.ForeignKey关联 获取对象元素 grade.student_set</p>\n<h5 id=\"2-2-获取数据\"><a href=\"#2-2-获取数据\" class=\"headerlink\" title=\"2.2 获取数据\"></a>2.2 获取数据</h5><p>语法：通过一获取多的数据</p>\n<p>公式： 一的对象.多的模型_set</p>\n<p>然后在获取数据all(), get(), filter() 等等</p>\n<p>如下先通过学生去获取班级信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stu = Student.objects.first()</span><br><span class=\"line\">stu.stu_grade</span><br></pre></td></tr></table></figure>\n<p>如下是通过班级获取学生信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g = Grade.objects.all().first()</span><br><span class=\"line\">g.stugrade.all()   ---&gt; 其中stugrade是定义的related_name参数</span><br></pre></td></tr></table></figure>\n<p>重点： 定义了related_name字段以后，只能通过related_name去反向获取数据，在也不能通过_set方法去获取数据了</p>\n<h5 id=\"2-3-性能对比\"><a href=\"#2-3-性能对比\" class=\"headerlink\" title=\"2.3 性能对比\"></a>2.3 性能对比</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取班级的学生(通过一获取多)</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>1. 低性能方法：\ng = Grade.objects.all().first()\ns = Student.objects.filter(s_grade=g)\n\n2. 高性能方法：\ng = Grate.objects.all().first()\ns = g.student_set.all()\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2-4-练习题\"><a href=\"#2-4-练习题\" class=\"headerlink\" title=\"2.4 练习题\"></a>2.4 练习题</h5><h6 id=\"2-6-获取python班下的所有学生的信息\"><a href=\"#2-6-获取python班下的所有学生的信息\" class=\"headerlink\" title=\"2.6 获取python班下的所有学生的信息\"></a>2.6 获取python班下的所有学生的信息</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class=\"line\">allstu = gs.student_set.all()</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-7-获取python班下语文成绩大于80分的女学生\"><a href=\"#2-7-获取python班下语文成绩大于80分的女学生\" class=\"headerlink\" title=\"2.7 获取python班下语文成绩大于80分的女学生\"></a>2.7 获取python班下语文成绩大于80分的女学生</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class=\"line\">allstu = gs.student_set.filter(stu_yuwen__gte=80)</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-8-获取python班下语文成绩超过数学成绩10分的男学生\"><a href=\"#2-8-获取python班下语文成绩超过数学成绩10分的男学生\" class=\"headerlink\" title=\"2.8 获取python班下语文成绩超过数学成绩10分的男学生\"></a>2.8 获取python班下语文成绩超过数学成绩10分的男学生</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class=\"line\">allstu = gs.student_set.filter(stu_yuwen__gte=F(&apos;stu_shuxue&apos;) + 10)</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-9-获取出生在80后的男学生，查看他们的班级\"><a href=\"#2-9-获取出生在80后的男学生，查看他们的班级\" class=\"headerlink\" title=\"2.9 获取出生在80后的男学生，查看他们的班级\"></a>2.9 获取出生在80后的男学生，查看他们的班级</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class=\"line\">allstu = gs.student_set.filter(stu_birth__gte=&apos;1980-01-01&apos;, stu_birth__lte=&apos;1990-01-01&apos;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"3-多对多\"><a href=\"#3-多对多\" class=\"headerlink\" title=\"3. 多对多\"></a>3. 多对多</h4><h5 id=\"3-1-M-N-模型\"><a href=\"#3-1-M-N-模型\" class=\"headerlink\" title=\"3.1 M:N 模型\"></a>3.1 M:N 模型</h5><p>定义购物车，用户的例子实现多对多：<br>\\<figure class=\"highlight plain\"><figcaption><span>创建用户模型: class GoodsUser(models.Model): u_name </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<pre><code>2. 创建商品模型:\nclass Goods(models.Model):\n    g_name = models.CharField(max_length=32)\n    g_user = models.ManyToManyField(User)\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-2-多对多表结构\"><a href=\"#3-2-多对多表结构\" class=\"headerlink\" title=\"3.2 多对多表结构\"></a>3.2 多对多表结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">多对多关系：</span><br><span class=\"line\">1. 生成表的时候会多生成一张表（实际会有三张表）</span><br><span class=\"line\">2. 生成的表是专门用来维护关系的</span><br><span class=\"line\">3. 生成的表是使用两个外键来维护多对多的关系</span><br><span class=\"line\">4. 两个一对多的关系来实现多对多的实现　　　</span><br><span class=\"line\">5. 删除一个表的数据的话，中间关联表也要删除相关的信息</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-3-练习题\"><a href=\"#3-3-练习题\" class=\"headerlink\" title=\"3.3 练习题\"></a>3.3 练习题</h5><h6 id=\"3-3-1-获取第一个用户购买了那些商品\"><a href=\"#3-3-1-获取第一个用户购买了那些商品\" class=\"headerlink\" title=\"3.3.1 获取第一个用户购买了那些商品\"></a>3.3.1 获取第一个用户购买了那些商品</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>gu = GoodsUser.objects.all().first()\nallstu = gu.goods_set.all()\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-3-2-获取指定商品的购买用户信息\"><a href=\"#3-3-2-获取指定商品的购买用户信息\" class=\"headerlink\" title=\"3.3.2 获取指定商品的购买用户信息\"></a>3.3.2 获取指定商品的购买用户信息</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>g = Goods.objects.filter(id=1)[0]\ng.g_user.all()\n</code></pre><p>​<code></code></p>\n","categories":[{"name":"Django","slug":"Django","count":7,"path":"api/categories/Django.json"}],"tags":[{"name":"Django、ORM","slug":"Django、ORM","count":1,"path":"api/tags/Django、ORM.json"}]}