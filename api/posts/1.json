{"total":19,"pageSize":5,"pageCount":4,"data":[{"title":"爬虫初探","slug":"爬虫初探","date":"2018-06-15T08:24:42.000Z","updated":"2018-06-25T09:13:45.618Z","comments":true,"path":"api/articles/爬虫初探.json","excerpt":"<h1 id=\"爬虫初探\"><a href=\"#爬虫初探\" class=\"headerlink\" title=\"爬虫初探\"></a>爬虫初探</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>网络爬虫（Web Spider。又被称为网页蜘蛛。网络机器人，又称为网页追逐者），是一种依照一定的规则，自己主动的抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁，自己主动索引。模拟程序或者蠕虫。假设把互联网比喻成一个蜘蛛网，那么Spider就是在网上爬来爬去的蜘蛛。</p>\n<p>网络蜘蛛是通过网页的链接地址来寻找网页的。从站点某一个页面（一般是首页）開始，读取网页的内容。找到在网页中的其他链接地址。然后通过这些链接地址寻找下一个网页。这样一直循环下去，直到把这个站点全部的网页都抓取完为止。假设把整个互联网当成一个站点。那么网络蜘蛛就能够用这个原理把互联网上全部的网页都抓取下来。这样看来，网络爬虫就是一个爬行程序，一个抓取网页的程序。</p>\n<p><em>简单地说，网络爬虫的基本任务就是抓取网页内容。</em></p>\n<h3 id=\"1-爬虫程序设计\"><a href=\"#1-爬虫程序设计\" class=\"headerlink\" title=\"1.爬虫程序设计\"></a>1.爬虫程序设计</h3><p><strong>1.1 获取网页信息： ulrllib、urllib3、requests</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requests为第三方的库，需要安装才能使用</span><br><span class=\"line\"></span><br><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure></p>","keywords":null,"cover":null,"content":null,"text":"爬虫初探简介网络爬虫（Web Spider。又被称为网页蜘蛛。网络机器人，又称为网页追逐者），是一种依照一定的规则，自己主动的抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁，自己主动索引。模拟程序或者蠕虫。假设把互联网比喻成一个蜘蛛网，那么Spider就是在网上爬来","link":"","raw":null,"photos":[],"categories":[{"name":"基于urllib的基础爬虫","slug":"基于urllib的基础爬虫","count":1,"path":"api/categories/基于urllib的基础爬虫.json"}],"tags":[{"name":"爬虫","slug":"爬虫","count":1,"path":"api/tags/爬虫.json"}]},{"title":"将django项目部署到CentOS服务器上","slug":"将django项目部署到CentOS服务器上","date":"2018-06-04T12:24:15.000Z","updated":"2018-06-25T09:12:59.710Z","comments":true,"path":"api/articles/将django项目部署到CentOS服务器上.json","excerpt":"<h1 id=\"将django项目部署到CentOS服务器上\"><a href=\"#将django项目部署到CentOS服务器上\" class=\"headerlink\" title=\"将django项目部署到CentOS服务器上\"></a>将django项目部署到CentOS服务器上</h1><h3 id=\"安装mariadb\"><a href=\"#安装mariadb\" class=\"headerlink\" title=\"安装mariadb\"></a>安装mariadb</h3><p>安装命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install mariadb mariadb-server</span><br></pre></td></tr></table></figure></p>\n<p>安装完成MariaDB，首先启动MariaDB</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mariadb</span><br></pre></td></tr></table></figure>\n<p>设置开机启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable mariadb</span><br></pre></td></tr></table></figure></p>","keywords":null,"cover":"/2018/06/04/将django项目部署到CentOS服务器上/django_centos_nginx.png","content":null,"text":"将django项目部署到CentOS服务器上安装mariadb安装命令<br>1<br>yum -y install mariadb mariadb-server<br>安装完成MariaDB，首先启动MariaDB1<br>systemctl start mariadb<br>","link":"","raw":null,"photos":[],"categories":[{"name":"Linux","slug":"Linux","count":4,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"}]},{"title":"Django分页，中间件，验证码使用指南","slug":"django分页，中间件，验证码使用指南","date":"2018-05-26T10:20:55.000Z","updated":"2018-06-25T09:10:16.312Z","comments":true,"path":"api/articles/django分页，中间件，验证码使用指南.json","excerpt":"<h1 id=\"django分页，中间件，验证码使用指南\"><a href=\"#django分页，中间件，验证码使用指南\" class=\"headerlink\" title=\"django分页，中间件，验证码使用指南\"></a>django分页，中间件，验证码使用指南</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在django中提供了很多的插件功能，有利于开发者快速开发，比如中间件，分页器等 还提供了Pillow库，可以进行生成图片，用于登录的验证码图书设计。</p>\n<h3 id=\"1-中间件Middleware\"><a href=\"#1-中间件Middleware\" class=\"headerlink\" title=\"1. 中间件Middleware\"></a>1. 中间件Middleware</h3><p><strong>中间件：</strong><br></p>","keywords":null,"cover":"/2018/05/26/django分页，中间件，验证码使用指南/./django_middleware_liucheng.png","content":null,"text":"django分页，中间件，验证码使用指南前言在django中提供了很多的插件功能，有利于开发者快速开发，比如中间件，分页器等 还提供了Pillow库，可以进行生成图片，用于登录的验证码图书设计。1. 中间件Middleware中间件：<br><br>a) 是一个轻量级的，底层的插","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":7,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"Django使用自带的admin管理后台","slug":"django使用自带的admin管理后台","date":"2018-05-20T08:16:55.000Z","updated":"2018-06-25T09:11:18.377Z","comments":true,"path":"api/articles/django使用自带的admin管理后台.json","excerpt":"<h1 id=\"Django使用自带的admin管理后台\"><a href=\"#Django使用自带的admin管理后台\" class=\"headerlink\" title=\"Django使用自带的admin管理后台\"></a>Django使用自带的admin管理后台</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Django框架是十分的强大的，利用其它框架，我们可能要自己去实现后台管理，但是Django直接就已经集成了管理后台，在管理后台中我们可以对自定义model进行CRUD操作，也能进行列表展示解析，分页等等</p>\n<h3 id=\"使用admin管理后台\"><a href=\"#使用admin管理后台\" class=\"headerlink\" title=\"使用admin管理后台\"></a>使用admin管理后台</h3><p><strong>1.在model中定义Student的模型</strong></p>","keywords":null,"cover":null,"content":null,"text":"Django使用自带的admin管理后台前言Django框架是十分的强大的，利用其它框架，我们可能要自己去实现后台管理，但是Django直接就已经集成了管理后台，在管理后台中我们可以对自定义model进行CRUD操作，也能进行列表展示解析，分页等等使用admin管理后台1.在mo","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":7,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"在Djnago当中restful风格的实现","slug":"在djnago当中restful风格的实现","date":"2018-05-18T05:31:15.000Z","updated":"2018-07-14T09:05:14.710Z","comments":true,"path":"api/articles/在djnago当中restful风格的实现.json","excerpt":"<h4 id=\"1-修改响应的结构\"><a href=\"#1-修改响应的结构\" class=\"headerlink\" title=\"1. 修改响应的结构\"></a>1. 修改响应的结构</h4><h5 id=\"1-1-修改settings-py中的返回数据结构的配置信息\"><a href=\"#1-1-修改settings-py中的返回数据结构的配置信息\" class=\"headerlink\" title=\"1.1 修改settings.py中的返回数据结构的配置信息\"></a>1.1 修改settings.py中的返回数据结构的配置信息</h5><p><img src=\"/2018/05/18/在djnago当中restful风格的实现/django_rest_render_setting.png\" alt=\"图\"></p>\n<p>注意：定义default_renderer_classes参数，指定render的时候使用我们自定义的CustomJsonRender的类方法</p>","keywords":null,"cover":"/2018/05/18/在djnago当中restful风格的实现/django_rest_render_setting.png","content":null,"text":"1. 修改响应的结构1.1 修改settings.py中的返回数据结构的配置信息 [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"django","slug":"django","count":1,"path":"api/categories/django.json"}],"tags":[{"name":"Restful,django","slug":"Restful-django","count":1,"path":"api/tags/Restful-django.json"}]}]}