{"total":11,"pageSize":5,"pageCount":3,"data":[{"title":"windows下如何一步一步搭建Django项目","slug":"如何一步一步搭建Django项目","date":"2018-05-11T11:36:22.000Z","updated":"2018-06-05T01:37:17.557Z","comments":true,"path":"api/articles/如何一步一步搭建Django项目.json","excerpt":"","keywords":null,"cover":"/2018/05/11/如何一步一步搭建Django项目/./项目目录.png","content":"<h3 id=\"1-安装虚拟环境\"><a href=\"#1-安装虚拟环境\" class=\"headerlink\" title=\"1.安装虚拟环境\"></a>1.安装虚拟环境</h3><p>​    首先，要确保的是你的电脑已经安装了Python和pip包，如果没有安装，那么请移步百老师将Python环境搭建好！有了Python环境后，接下来我们就正式安装虚拟环境了。</p>\n<p>​    <strong>为什么要安装虚拟环境呢？</strong> 首先是每个项目所需要的环境不一样，如果我们每个项目都使用一个环境，那么环境必然是复杂臃肿的，其次，某些项目需要不同的版本，比如Python2、Python3和Django1.x、Django2.x等。</p>\n<p>​    好了，正式开始！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、安装virtualenv</span></span><br><span class=\"line\"><span class=\"comment\"># 进入cmd终端</span></span><br><span class=\"line\">pip install virtualenv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、查看安装的virtualenv版本及help帮助选项</span></span><br><span class=\"line\"><span class=\"comment\"># 其中需要注意的是-p 和 --no-site-packages 这两个参数</span></span><br><span class=\"line\"><span class=\"comment\"># -p是选择使用什么本地Python版本，--no-site-packages是不依赖安装其他包，值安装纯净的python虚拟环境</span></span><br><span class=\"line\">virtualenv --version</span><br><span class=\"line\">virtualenv --help</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、安装虚拟环境</span></span><br><span class=\"line\">virtualenv --no-site-packages djangoenv（虚拟环境名字）</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-创建Django项目\"><a href=\"#2-创建Django项目\" class=\"headerlink\" title=\"2.创建Django项目\"></a>2.创建Django项目</h3><p>​    通过上面的步骤我们已经拥有了一个纯净的Python虚拟环境了，接下来就是创建Django项目了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1、进入虚拟环境</span><br><span class=\"line\">cd djangoenv/Scripts</span><br><span class=\"line\">activate   # 进入虚拟环境</span><br><span class=\"line\">deactivate   # 退出虚拟环境</span><br><span class=\"line\"># 2、安装Django</span><br><span class=\"line\">pip install django==版本号 # 指定版本</span><br><span class=\"line\"># 3、去到要创建Django项目的位置</span><br><span class=\"line\">cd xxx</span><br><span class=\"line\"># 4、创建Django项目</span><br><span class=\"line\">django-admin startproject xxx(Django项目名)</span><br></pre></td></tr></table></figure>\n<p>至此，一个Django项目就已经创建好了，然后接下来我们就要实现功能，实现功能需要在app当中来实现，下一步就是创建app了。</p>\n<h2 id=\"3-创建app\"><a href=\"#3-创建app\" class=\"headerlink\" title=\"3.创建app\"></a>3.创建app</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp xxx（app名）</span><br></pre></td></tr></table></figure>\n<p>通过以上步骤，我们就完成了Django项目的创建，项目目录如下图：</p>\n<p><img src=\"/2018/05/11/如何一步一步搭建Django项目/./项目目录.png\" alt=\"项目目录\"></p>\n<p>manage.py： 是Django用于管理本项目的管理集工具，之后站点运行，数据库自动生成，数据表的修改等都是通过该文件完成。</p>\n<p>项目文件夹下共有5个顶级文件：主项目文件夹shop_market、APP文件夹xfmart、静态文件夹static、模板文件夹templates、项目管理manage.py文件。</p>\n<p><strong>init</strong>.py： 指明该目录结构是一个python包，暂无内容，在后期会初始化一些工具会使用到。</p>\n<p>seetings.py： Django项目的配置文件，其中定义了本项目的引用组件，项目名，数据库，静态资源，调试模式，域名限制等</p>\n<p>urls.py：项目的URL路由映射，实现客户端请求url由哪个模块进行响应。</p>\n<p>wsgi.py：定义WSGI接口信息，通常本文件生成后无需改动</p>\n<h2 id=\"4-setting配置\"><a href=\"#4-setting配置\" class=\"headerlink\" title=\"4.setting配置\"></a>4.setting配置</h2><p>配置installed_apps配置，templates配置，数据库，时区， 静态的static</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.在INSTALLED_APPS里加入创建的app</span></span><br><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">  <span class=\"string\">''''</span></span><br><span class=\"line\"><span class=\"string\">  'xxx'(app名)</span></span><br><span class=\"line\"><span class=\"string\">]</span></span><br><span class=\"line\"><span class=\"string\"># 2.tempaltes模板设置</span></span><br><span class=\"line\"><span class=\"string\">TEMPLATES = [</span></span><br><span class=\"line\"><span class=\"string\">  '''</span><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">  'DIRS':[os.path.join(BASE_DIR, 'templates')],</span></span><br><span class=\"line\"><span class=\"string\">]</span></span><br><span class=\"line\"><span class=\"string\"># 3.数据库设置（连接mysql，其他数据库大致相同）</span></span><br><span class=\"line\"><span class=\"string\">DATABASES = &#123;</span></span><br><span class=\"line\"><span class=\"string\">    'default': &#123;</span></span><br><span class=\"line\"><span class=\"string\">        'ENGINE': 'django.db.backends.mysql',</span></span><br><span class=\"line\"><span class=\"string\">        'NAME': 'xfmarket',</span></span><br><span class=\"line\"><span class=\"string\">        'HOST': '数据库主机地址',</span></span><br><span class=\"line\"><span class=\"string\">        'PORT': '3306',</span></span><br><span class=\"line\"><span class=\"string\">        'USER': '用户名',</span></span><br><span class=\"line\"><span class=\"string\">        'PASSWORD': '密码'</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"># 4.时区及语言</span></span><br><span class=\"line\"><span class=\"string\">LANGUAGE_CODE = 'zh-hans'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">TIME_ZONE = 'Asia/Shanghai'</span></span><br><span class=\"line\"><span class=\"string\"># 5.static文件和media文件路径配置</span></span><br><span class=\"line\"><span class=\"string\">STATIC_URL = '/static/'</span></span><br><span class=\"line\"><span class=\"string\">STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">MEDIA_URL = '/media/'</span></span><br><span class=\"line\"><span class=\"string\">MEDIA_ROOT = os.path.join(BASE_DIR, 'media')</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-启动项目\"><a href=\"#5-启动项目\" class=\"headerlink\" title=\"5.启动项目\"></a>5.启动项目</h2><p>经过一番设置创建，我们的Django项目就创建完成了，接下来就是启动项目了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在黑屏终端输入</span></span><br><span class=\"line\">python manager.py runserver</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/05/11/如何一步一步搭建Django项目/./项目启动.png\" alt=\"项目启动\"></p>\n<p>至此，Django项目就启动成功了！</p>\n","text":"1.安装虚拟环境​    首先，要确保的是你的电脑已经安装了Python和pip包，如果没有安装，那么请移步百老师将Python环境搭建好！有了Python环境后，接下来我们就正式安装虚拟环境了。​    为什么要安装虚拟环境呢？ 首先是每个项目所需要的环境不一样，如果我们每个项","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":3,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":3,"path":"api/tags/Django.json"}]},{"title":"Django初识","slug":"Django的初识","date":"2018-05-10T07:01:50.000Z","updated":"2018-06-05T01:31:55.771Z","comments":true,"path":"api/articles/Django的初识.json","excerpt":"","keywords":null,"cover":"/2018/05/10/Django的初识/C:/Users\\Administrator\\Desktop\\blog\\source\\_posts\\django1.jpg","content":"<h3 id=\"1-Django简介：\"><a href=\"#1-Django简介：\" class=\"headerlink\" title=\"1.Django简介：\"></a>1.Django简介：</h3><p>Django发布于2005年7月，是当前Python世界里最有名且成熟的网络框架。 最初是被开发用于管理劳伦斯出版集团旗下的以新闻内容为主的网站的，即CMS(内容管理系统)软件。</p>\n<p>Django是一个用Python编写的开放源代码的Web应用框架，代码是开源的。此系统采用了MVC的框架模式, 也可以称为MTV模式</p>\n<p>具体介绍详见<a href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"noopener\">Django官网</a></p>\n<hr>\n<h3 id=\"2-什么是MVC\"><a href=\"#2-什么是MVC\" class=\"headerlink\" title=\"2.什么是MVC\"></a>2.什么是MVC</h3><p>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。 <strong>通俗的来讲就是，强制性的使应用程序的输入，处理和输出分开。</strong>通过控制器，将数据和显示分离，好处是同一个视图可以加载不同的模型，同一个模型也可以显示成不同的视图<br>稍具规模的系统都会使用MVC架构或者它的变体（MVP、MVVM等）。</p>\n<p><strong>它是对面向对象设计原则中迪米特法则的一个最好的践行</strong></p>\n<p><strong>核心思想</strong>：解耦</p>\n<p><strong>优点</strong>：减低各个模块之间的耦合性，方便变更，更容易重构代码，最大程度的实现了代码的重用</p>\n<p>MVC(Model, View, Controller) Model: 即数据存取层。用于封装于应用程序的业务逻辑相关的数据，以及对数据的处理。说白了就是模型对象负责在数据库中存取数据</p>\n<p>View: 即表现层。负责数据的显示和呈现。渲染的html页面给用户，或者返回数据给用户。</p>\n<p>Controller: 即业务逻辑层。负责从用户端收集用户的输入，进行业务逻辑处理，包括向模型中发送数据，进行CRUD操作。</p>\n<p><img src=\"/2018/05/10/Django的初识/C:/Users\\Administrator\\Desktop\\blog\\source\\_posts\\django1.jpg\" alt=\"\"></p>\n<p><img src=\"/2018/05/10/Django的初识/C:/Users\\Administrator\\Desktop\\blog\\source\\_posts\\mvc.jpg\" alt=\"mvc\"></p>\n<hr>\n<h3 id=\"3-Django的模式简介\"><a href=\"#3-Django的模式简介\" class=\"headerlink\" title=\"3.Django的模式简介\"></a>3.Django的模式简介</h3><p>严格来说，Django的模式应该是MVT模式，本质上和MVC没什么区别，也是各组件之间为了保持松耦合关系，只是定义上有些许不同。</p>\n<p>Model： 负责业务与数据库(ORM)的对象</p>\n<p>View： 负责业务逻辑并适当调用Model和Template</p>\n<p>Template: 负责把页面渲染展示给用户</p>\n<p>注意： Django中还有一个url分发器，也叫作路由。主要用于将url请求发送给不同的View处理，View在进行相关的业务逻辑处理。</p>\n<hr>\n<p>参考文章：<a href=\"https://github.com/simonzhao88/knowledge/blob/master/django/1.1django_pattern.md\" target=\"_blank\" rel=\"noopener\">DJANGO使用指南</a> 作者：<a href=\"https://github.com/coco369/knowledge\" target=\"_blank\" rel=\"noopener\">王海飞</a></p>\n","text":"1.Django简介：Django发布于2005年7月，是当前Python世界里最有名且成熟的网络框架。 最初是被开发用于管理劳伦斯出版集团旗下的以新闻内容为主的网站的，即CMS(内容管理系统)软件。Django是一个用Python编写的开放源代码的Web应用框架，代码是开源的。","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":3,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":3,"path":"api/tags/Django.json"}]},{"title":"关于Django无法加载media文件里的静态文件问题解决方法","slug":"关于django无法加载media文件里的静态文件问题解决方法","date":"2018-05-09T12:16:55.000Z","updated":"2018-06-05T01:35:19.716Z","comments":true,"path":"api/articles/关于django无法加载media文件里的静态文件问题解决方法.json","excerpt":"","keywords":null,"cover":null,"content":"<h3 id=\"第一种配置\"><a href=\"#第一种配置\" class=\"headerlink\" title=\"第一种配置\"></a>第一种配置</h3><h4 id=\"第一步、在setting里加入如下配置\"><a href=\"#第一步、在setting里加入如下配置\" class=\"headerlink\" title=\"第一步、在setting里加入如下配置\"></a>第一步、在setting里加入如下配置</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATIC_URL = <span class=\"string\">'/static/'</span></span><br><span class=\"line\">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class=\"string\">'static'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MEDIA_URL = <span class=\"string\">'/media/'</span></span><br><span class=\"line\">MEDIA_ROOT = os.path.join(BASE_DIR, <span class=\"string\">'media'</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"第二步、在项目urls下加入以下配置\"><a href=\"#第二步、在项目urls下加入以下配置\" class=\"headerlink\" title=\"第二步、在项目urls下加入以下配置\"></a>第二步、在项目urls下加入以下配置</h4><p>开头引入以下包</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib.staticfiles.urls <span class=\"keyword\">import</span> static</span><br><span class=\"line\"><span class=\"keyword\">from</span> stu_ms.settings <span class=\"keyword\">import</span> MEDIA_ROOT, MEDIA_URL</span><br></pre></td></tr></table></figure>\n<p>末尾加入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns += static(MEDIA_URL, document_root=MEDIA_ROOT)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二种配置\"><a href=\"#第二种配置\" class=\"headerlink\" title=\"第二种配置\"></a>第二种配置</h3><h4 id=\"第一步、在settings-py文件的最后加上以下内容\"><a href=\"#第一步、在settings-py文件的最后加上以下内容\" class=\"headerlink\" title=\"第一步、在settings.py文件的最后加上以下内容:\"></a>第一步、在settings.py文件的最后加上以下内容:</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATIC_URL = ‘/static/’ </span><br><span class=\"line\">STATIC_ROOT = os.path.join(BASE_DIR, ’static’)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置图片等静态文件的路径</span></span><br><span class=\"line\">STATICFILES_DIRS = ( </span><br><span class=\"line\">(‘css’,os.path.join(STATIC_ROOT,’css’).replace(‘\\’,’/’) ), </span><br><span class=\"line\">(‘js’,os.path.join(STATIC_ROOT,’js’).replace(‘\\’,’/’) ), </span><br><span class=\"line\">(‘images’,os.path.join(STATIC_ROOT,’images’).replace(‘\\’,’/’) ), </span><br><span class=\"line\">(‘upload’,os.path.join(STATIC_ROOT,’upload’).replace(‘\\’,’/’) ), </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h4 id=\"第二步、在项目urls下加入以下配置-1\"><a href=\"#第二步、在项目urls下加入以下配置-1\" class=\"headerlink\" title=\"第二步、在项目urls下加入以下配置\"></a>第二步、在项目urls下加入以下配置</h4><p>开头引入以下包</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib.staticfiles.urls <span class=\"keyword\">import</span> staticfiles_urlpatterns</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> staticfiles</span><br></pre></td></tr></table></figure>\n<p>末尾加入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns += staticfiles_urlpatterns()</span><br></pre></td></tr></table></figure>\n<p>至此，关于django无法加载media文件夹里的静态文件的问题就能够解决了，如若还不能解决，请尝试网管三绝招！</p>\n","text":"第一种配置第一步、在setting里加入如下配置1<br>2<br>3<br>4<br>5<br>6<br>STATIC_URL = '/static/'<br>STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]<br><b","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":3,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":3,"path":"api/tags/Django.json"}]},{"title":"CentOS7.2下安装MySQL5.7","slug":"CentOS7-2下安装MySQL5-7","date":"2018-05-03T07:14:31.000Z","updated":"2018-06-05T01:24:37.864Z","comments":true,"path":"api/articles/CentOS7-2下安装MySQL5-7.json","excerpt":"<h2 id=\"CentOS7-2-安装mysql5-7初始密码问题总结\"><a href=\"#CentOS7-2-安装mysql5-7初始密码问题总结\" class=\"headerlink\" title=\"CentOS7.2 安装mysql5.7初始密码问题总结\"></a>CentOS7.2 安装mysql5.7初始密码问题总结</h2><p>CentOS 7之后的版本yum的默认源中使用MariaDB替代原先MySQL。这对于想要使用MySQL的朋友来说，安装MySQL就比较麻烦了，笔者看了网上很多的教程，感觉不是很友好，幸运的是经过几天的摸索，笔者终于成功的装上了MySQL，现将安装的经验总结如下。</p>","keywords":null,"cover":null,"content":null,"text":"CentOS7.2 安装mysql5.7初始密码问题总结CentOS 7之后的版本yum的默认源中使用MariaDB替代原先MySQL。这对于想要使用MySQL的朋友来说，安装MySQL就比较麻烦了，笔者看了网上很多的教程，感觉不是很友好，幸运的是经过几天的摸索，笔者终于成功的装","link":"","raw":null,"photos":[],"categories":[{"name":"Linux","slug":"Linux","count":3,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"}]},{"title":"Python的基本语法整理","slug":"Python的基本语法整理","date":"2018-04-26T06:54:17.000Z","updated":"2018-06-05T01:24:20.999Z","comments":true,"path":"api/articles/Python的基本语法整理.json","excerpt":"<h1 id=\"Python的基础语法知识整理集合\"><a href=\"#Python的基础语法知识整理集合\" class=\"headerlink\" title=\"Python的基础语法知识整理集合\"></a>Python的基础语法知识整理集合</h1><p>收集整理了Python的基础语法，包括数据类型的详细解释和Python自带的各类模块</p>\n<h2 id=\"1-进制之间的转换\"><a href=\"#1-进制之间的转换\" class=\"headerlink\" title=\"1. 进制之间的转换\"></a>1. 进制之间的转换</h2><p>二进制 -&gt; 十进制<br>八进制 -&gt; 二级制<br>十进制 -&gt; 二进制</p>","keywords":null,"cover":null,"content":null,"text":"Python的基础语法知识整理集合收集整理了Python的基础语法，包括数据类型的详细解释和Python自带的各类模块1. 进制之间的转换二进制 -&gt; 十进制<br>八进制 -&gt; 二级制<br>十进制 -&gt; 二进制2.逻辑运算符逻辑运算符<br>与(and)  ","link":"","raw":null,"photos":[],"categories":[{"name":"Python","slug":"Python","count":2,"path":"api/categories/Python.json"}],"tags":[{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"}]}]}