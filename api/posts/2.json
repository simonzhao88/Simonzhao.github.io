{"total":19,"pageSize":5,"pageCount":4,"data":[{"title":"关于Restful指导原则的理解","slug":"关于Restful指导原则的理解","date":"2018-05-15T08:34:10.000Z","updated":"2018-07-14T08:33:47.948Z","comments":true,"path":"api/articles/关于Restful指导原则的理解.json","excerpt":"","keywords":null,"cover":"/2018/05/15/关于Restful指导原则的理解/C:/Users\\Administrator\\Desktop\\Desktop\\blog\\source\\_posts\\django_rest_method.png","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>REST是所有Web应用都应该遵守的架构设计指导原则。</p>\n<p>Representational State Transfer，翻译是”表现层状态转化”。</p>\n<p>REST核心: <strong>资源， 状态转移， 统一接口</strong></p>\n<p><strong>资源:</strong> 是REST最明显的特征,是指对某类信息实体的抽象，资源是服务器上一个可命名的抽象概念，资源是以名词为核心来组织的，首先关注的是名词。</p>\n<p><strong>状态转移:</strong> 是指客户端痛服务端进行交互的过程中，客户端能够通过对资源的表述，实现操作资源的目的</p>\n<p><strong>统一接口:</strong> REST要求，必须通过统一的接口来对资源执行各种操作。对于每个资源只能执行一组有限的操作。 比如，客户端通过HTTP的4个请求方式(POST, GET, PUT, PATCH)来操作资源，也就意味着不管你的url是什么，不管请求的资源是什么但操作的资源接口都是统一的。</p>\n<p>GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT(PATCH)用来更新资源，DELETE用来删除资源。</p>\n<h4 id=\"1-api定义规范\"><a href=\"#1-api定义规范\" class=\"headerlink\" title=\"1. api定义规范\"></a>1. api定义规范</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://xxx.com/api/</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-资源\"><a href=\"#2-资源\" class=\"headerlink\" title=\"2. 资源\"></a>2. 资源</h4><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p>\n<p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.example.com/v1/zoos</span><br><span class=\"line\"></span><br><span class=\"line\">https://api.example.com/v1/animals</span><br><span class=\"line\"></span><br><span class=\"line\">https://api.example.com/v1/employees</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-http请求方式\"><a href=\"#3-http请求方式\" class=\"headerlink\" title=\"3. http请求方式\"></a>3. http请求方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET（SELECT）：从服务器取出资源（一项或多项）</span><br><span class=\"line\"></span><br><span class=\"line\">POST（CREATE）：在服务器新建一个资源</span><br><span class=\"line\"></span><br><span class=\"line\">PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）</span><br><span class=\"line\"></span><br><span class=\"line\">PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）</span><br><span class=\"line\"></span><br><span class=\"line\">DELETE（DELETE）：从服务器删除资源</span><br></pre></td></tr></table></figure>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /zoos：列出所有动物园</span><br><span class=\"line\"></span><br><span class=\"line\">POST /zoos：新建一个动物园</span><br><span class=\"line\"></span><br><span class=\"line\">GET /zoos/ID：获取某个指定动物园的信息</span><br><span class=\"line\"></span><br><span class=\"line\">PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class=\"line\"></span><br><span class=\"line\">PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class=\"line\"></span><br><span class=\"line\">DELETE /zoos/ID：删除某个动物园</span><br><span class=\"line\"></span><br><span class=\"line\">GET /zoos/ID/animals：列出某个指定动物园的所有动物</span><br><span class=\"line\"></span><br><span class=\"line\">DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-filter过滤\"><a href=\"#4-filter过滤\" class=\"headerlink\" title=\"4. filter过滤\"></a>4. filter过滤</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</span><br><span class=\"line\"></span><br><span class=\"line\">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class=\"line\"></span><br><span class=\"line\">?animal_type_id=1：指定筛选条件</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-状态码\"><a href=\"#5-状态码\" class=\"headerlink\" title=\"5. 状态码\"></a>5. 状态码</h4><p>服务端向用户返回请求api的结果，在结果中包含了status codes 状态码的，可以通过状态码去判断请求api的状态是成功还是失败</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class=\"line\"></span><br><span class=\"line\">201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</span><br><span class=\"line\"></span><br><span class=\"line\">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class=\"line\"></span><br><span class=\"line\">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class=\"line\"></span><br><span class=\"line\">400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class=\"line\"></span><br><span class=\"line\">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class=\"line\"></span><br><span class=\"line\">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class=\"line\"></span><br><span class=\"line\">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class=\"line\"></span><br><span class=\"line\">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class=\"line\"></span><br><span class=\"line\">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class=\"line\"></span><br><span class=\"line\">422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class=\"line\"></span><br><span class=\"line\">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-错误处理\"><a href=\"#6-错误处理\" class=\"headerlink\" title=\"6. 错误处理\"></a>6. 错误处理</h4><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\terror: &apos;错误信息&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-django中使用restful\"><a href=\"#7-django中使用restful\" class=\"headerlink\" title=\"7. django中使用restful\"></a>7. django中使用restful</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install djangorestframework</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pip install django-filter  # Filtering support</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-简单的CRUD\"><a href=\"#8-简单的CRUD\" class=\"headerlink\" title=\"8. 简单的CRUD\"></a>8. 简单的CRUD</h4><p>导入相关的信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from rest_framework import mixins, viewsets</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/05/15/关于Restful指导原则的理解/C:/Users\\Administrator\\Desktop\\Desktop\\blog\\source\\_posts\\django_rest_method.png\" alt=\"图\"></p>\n<p>CRUD对应的增删改查：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增： POST http://127.0.0.1:8080/stu/addStu/</span><br><span class=\"line\"></span><br><span class=\"line\">删： DELETE http://127.0.0.1:8080/stu/addStu/1/</span><br><span class=\"line\"></span><br><span class=\"line\">改： UPDATE http://127.0.0.1:8080/stu/addStu/1/</span><br><span class=\"line\"></span><br><span class=\"line\">查： GET http://127.0.0.1:8080/stu/addStu/1/</span><br></pre></td></tr></table></figure>","text":"前言REST是所有Web应用都应该遵守的架构设计指导原则。Representational State Transfer，翻译是”表现层状态转化”。REST核心: 资源， 状态转移， 统一接口资源: 是REST最明显的特征,是指对某类信息实体的抽象，资源是服务器上一个可命名的抽象","link":"","raw":null,"photos":[],"categories":[{"name":"Restful","slug":"Restful","count":1,"path":"api/categories/Restful.json"}],"tags":[{"name":"Restful","slug":"Restful","count":1,"path":"api/tags/Restful.json"}]},{"title":"Django中模型的设计","slug":"Django中模型的设计","date":"2018-05-12T03:01:50.000Z","updated":"2018-07-14T08:22:25.323Z","comments":true,"path":"api/articles/Django中模型的设计.json","excerpt":"","keywords":null,"cover":"/2018/05/12/Django中模型的设计/C:/Users\\Administrator\\Desktop\\Desktop\\blog\\source\\_posts\\django_models.jpg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>​    Django对数据库提供了很好的支持，对不同的数据库,django提供了统一调用的API，我们可以根据不同的业务需求使用不同是数据库。Django中引入了ORM(Objects Relational Mapping)对象关系映射，是一种程序技术。在下面会详细的讲解。</p>\n<h4 id=\"1-定义模型\"><a href=\"#1-定义模型\" class=\"headerlink\" title=\"1.定义模型\"></a>1.定义模型</h4><h6 id=\"重要概念：模型，表，属性，字段\"><a href=\"#重要概念：模型，表，属性，字段\" class=\"headerlink\" title=\"重要概念：模型，表，属性，字段\"></a>重要概念：模型，表，属性，字段</h6><p>一个模型类在数据库中对应一张表，在模型类中定义的属性，对应模型对照表中的一个字段</p>\n<p>定义属性见定义属性文件<a href=\"https://github.com/coco369/knowledge/blob/master/django\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h6 id=\"创建学生模型类\"><a href=\"#创建学生模型类\" class=\"headerlink\" title=\"创建学生模型类\"></a>创建学生模型类</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    s_name = models.CharField(max_length=<span class=\"number\">10</span>)</span><br><span class=\"line\">    s_age = models.IntegerField()</span><br><span class=\"line\">    s_gender = models.BooleanField()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        db_table = <span class=\"string\">'cd_student'</span></span><br><span class=\"line\">        ordering =[]</span><br><span class=\"line\">    对象的默认排序字段，获取对象列表时使用，升序ordering[<span class=\"string\">'id'</span>]，降序ordering[<span class=\"string\">'-id'</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-ORM\"><a href=\"#2-ORM\" class=\"headerlink\" title=\"2.ORM\"></a>2.ORM</h4><p>ORM(Objects Relational Mapping)对象关系映射，是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。可以简单理解为翻译机。</p>\n<p><img src=\"/2018/05/12/Django中模型的设计/C:/Users\\Administrator\\Desktop\\Desktop\\blog\\source\\_posts\\django_models.jpg\" alt=\"图\"></p>\n<h4 id=\"3-模型查询\"><a href=\"#3-模型查询\" class=\"headerlink\" title=\"3. 模型查询\"></a>3. 模型查询</h4><h6 id=\"a-模型成员objects\"><a href=\"#a-模型成员objects\" class=\"headerlink\" title=\"a) 模型成员objects\"></a>a) 模型成员objects</h6><p>Django默认通过模型的objects对象实现模型数据查询</p>\n<h6 id=\"b-过滤器\"><a href=\"#b-过滤器\" class=\"headerlink\" title=\"b) 过滤器\"></a>b) 过滤器</h6><p>查询集表示从数据库获取的对象集合</p>\n<p>查询集可以有多个过滤器</p>\n<p>过滤器就是一个函数，基于所给的参数限制查询的结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从SQL角度来说，查询集合和select语句等价，过滤器就像where条件</span><br><span class=\"line\"></span><br><span class=\"line\">Django有两种过滤器用于筛选记录</span><br><span class=\"line\"></span><br><span class=\"line\">\tfilter\t  : 返回符合筛选条件的数据集</span><br><span class=\"line\"></span><br><span class=\"line\">\texclude   : 返回不符合筛选条件的数据集</span><br></pre></td></tr></table></figure>\n<p>多个filter和exclude可以连接在一起查询</p>\n<p>当然还有如下这些过滤器:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all()            返回所有数据</span><br><span class=\"line\"></span><br><span class=\"line\">filter()\t 返回符合条件的数据</span><br><span class=\"line\"></span><br><span class=\"line\">exclude()        过滤掉符合条件的数据</span><br><span class=\"line\"></span><br><span class=\"line\">order_by()       排序</span><br><span class=\"line\"></span><br><span class=\"line\">values()         一条数据就是一个字典，返回一个列表</span><br></pre></td></tr></table></figure>\n<h6 id=\"c-查询单个数据\"><a href=\"#c-查询单个数据\" class=\"headerlink\" title=\"c) 查询单个数据\"></a>c) 查询单个数据</h6><p>get()：返回一个满足条件的对象。如果没有返回符合条件的对象，会应该模型类DoesNotExist异常，如果找到多个，会引发模型类MultiObjectsReturned异常</p>\n<p>first()：返回查询集中的第一个对象</p>\n<p>last()：返回查询集中的最后一个对象</p>\n<p>count()：返回当前查询集中的对象个数</p>\n<p>exists()：判断查询集中是否有数据，如果有数据返回True，没有返回False</p>\n<h6 id=\"d-限制查询集\"><a href=\"#d-限制查询集\" class=\"headerlink\" title=\"d) 限制查询集\"></a>d) 限制查询集</h6><p>限制查询集，可以使用下表的方法进行限制，等同于sql中的limit</p>\n<p>模型名.objects.all()[0:5] 小标不能为负数</p>\n<h6 id=\"e-字段查询\"><a href=\"#e-字段查询\" class=\"headerlink\" title=\"e) 字段查询\"></a>e) 字段查询</h6><p>对sql中的where实现，作为方法，filter(),exclude()，get()的参数</p>\n<p>语法：属性名称__比较运算符 = 值</p>\n<p>外键：属性名_id</p>\n<p>注意：like语句中使用%表示通配符。比如sql语句查询 where name like ‘%xxx%’，等同于filter(name_contains=’xxx’)</p>\n<h6 id=\"f-比较运算符\"><a href=\"#f-比较运算符\" class=\"headerlink\" title=\"f) 比较运算符\"></a>f) 比较运算符</h6><p>contains：是否包含，大小写敏感</p>\n<p>startswith，endswith：以values开头或者结尾，大小写敏感 以上的运算符前加上i(ignore)就不区分大小写了</p>\n<p>isnull，isnotnull：是否为空。filter(name__isnull=True)</p>\n<p>in：是否包含在范围内。filter(id__in=[1,2,3])</p>\n<p>gt，gte，lt，lte：大于，大于等于，小于，小于等于。filter(age__gt=10)</p>\n<p>pk：代表主键，也就是id。filter(pk=1)</p>\n<h6 id=\"g-聚合函数\"><a href=\"#g-聚合函数\" class=\"headerlink\" title=\"g) 聚合函数\"></a>g) 聚合函数</h6><p>agregate()函数返回聚合函数的值</p>\n<p>Avg：平均值</p>\n<p>Count：数量</p>\n<p>Max：最大</p>\n<p>Min：最小</p>\n<p>Sum：求和</p>\n<p>例如: Student.objects.aggregate(Max(‘age’))</p>\n<h6 id=\"h-F对象-Q对象\"><a href=\"#h-F对象-Q对象\" class=\"headerlink\" title=\"h) F对象/Q对象\"></a>h) F对象/Q对象</h6><p><strong>F对象:</strong>可以使用模型的A属性与B属性进行比较</p>\n<p>背景:在模型中有两个字段，分别表示学生成绩A与成绩B，要对成绩AB进行比较计算，就需要使用到F对象。</p>\n<p>例如有如下例子1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">班级中有女生个数字段以及男生个数字段，统计女生数大于男生数的班级可以如下操作:</span><br><span class=\"line\"></span><br><span class=\"line\">grades = Grade.objects.filter(girlnum__gt=F(&apos;boynum&apos;))</span><br></pre></td></tr></table></figure>\n<p>F对象支持算数运算</p>\n<p>grades = Grade.objects.filter(girlnum__gt=F(‘boynum’) + 10)</p>\n<p>例子2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询python班下语文成绩超过数学成绩10分的学生</span><br><span class=\"line\"></span><br><span class=\"line\">    grade = Grade.objects.filter(g_name=&apos;python&apos;).first()</span><br><span class=\"line\">    students = grade.student_set.all()</span><br><span class=\"line\"></span><br><span class=\"line\">    stu = students.filter(s_yuwen__gt= F(&apos;s_shuxue&apos;) + 10)</span><br></pre></td></tr></table></figure>\n<p><strong>Q对象:</strong></p>\n<p>Q()对象就是为了将过滤条件组合起来</p>\n<p>当我们在查询的条件中需要组合条件时(例如两个条件“且”或者“或”)时。我们可以使用Q()查询对象</p>\n<p>使用符号&amp;或者|将多个Q()对象组合起来传递给filter()，exclude()，get()等函数</p>\n<p>Q()对象的前面使用字符“~”来代表意义“非”</p>\n<p>例子1:</p>\n<p>查询学生中不是12岁的或者姓名叫张三的学生</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">student = Student.objects.filter(~Q(age=12) | Q(name=&apos;张三&apos;))</span><br></pre></td></tr></table></figure>\n<p>例子2：</p>\n<p>查询python班语文小于80并且数学小于等于80的学生</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grade = Grade.objects.filter(g_name=&apos;python&apos;).first()</span><br><span class=\"line\">students = grade.student_set.all()</span><br><span class=\"line\">stu = students.filter(~Q(s_yuwen__gte=80) &amp; Q(s_shuxue__lte=80))</span><br></pre></td></tr></table></figure>\n<p>例子3：</p>\n<p>查询python班语文大于等于80或者数学小于等于80的学生</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grade = Grade.objects.filter(g_name=&apos;python&apos;).first()</span><br><span class=\"line\">students = grade.student_set.all()</span><br><span class=\"line\"></span><br><span class=\"line\">stu = students.filter(Q(s_yuwen__gte=80) | Q(s_shuxue__lte=80))</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-模型字段定义属性\"><a href=\"#4-模型字段定义属性\" class=\"headerlink\" title=\"4.模型字段定义属性\"></a>4.模型字段定义属性</h4><p>定义属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">概述</span><br><span class=\"line\">\t·django根据属性的类型确定以下信息</span><br><span class=\"line\">\t\t·当前选择的数据库支持字段的类型</span><br><span class=\"line\">\t\t·渲染管理表单时使用的默认html控件</span><br><span class=\"line\">\t\t·在管理站点最低限度的验证</span><br><span class=\"line\"></span><br><span class=\"line\">\t·django会为表增加自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列后，则django不会再生成默认的主键列</span><br><span class=\"line\"></span><br><span class=\"line\">\t·属性命名限制</span><br><span class=\"line\">\t\t·遵循标识符规则(不使用python预定义的标识符号，内置函数名，异常等。避免使用下划线等)</span><br><span class=\"line\">\t\t·由于django的查询方式，不允许使用连续的下划线</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">库</span><br><span class=\"line\">\t·定义属性时，需要字段类型，字段类型被定义在django.db.models.fields目录下，为了方便使用，被导入到django.db.models中</span><br><span class=\"line\"></span><br><span class=\"line\">\t·使用方式</span><br><span class=\"line\">\t\t·导入from django.db import models</span><br><span class=\"line\">\t\t·通过models.Field创建字段类型的对象，赋值给属性</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">逻辑删除</span><br><span class=\"line\">\t·对于重要数据都做逻辑删除，不做物理删除，实现方法是定义isDelete属性，类型为BooleanField，默认值为False</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">字段类型</span><br><span class=\"line\">\t·AutoField</span><br><span class=\"line\">\t\t·一个根据实际ID自动增长的IntegerField，通常不指定如果不指定，一个主键字段将自动添加到模型中</span><br><span class=\"line\"></span><br><span class=\"line\">\t·CharField(max_length=字符长度)</span><br><span class=\"line\">\t\t·字符串，默认的表单样式是 TextInput</span><br><span class=\"line\"></span><br><span class=\"line\">\t·TextField</span><br><span class=\"line\">\t\t·大文本字段，一般超过4000使用，默认的表单控件是Textarea</span><br><span class=\"line\"></span><br><span class=\"line\">\t·IntegerField</span><br><span class=\"line\">\t\t·整数</span><br><span class=\"line\"></span><br><span class=\"line\">\t·DecimalField(max_digits=None, decimal_places=None)</span><br><span class=\"line\">\t\t·使用python的Decimal实例表示的十进制浮点数</span><br><span class=\"line\">\t\t·参数说明</span><br><span class=\"line\">\t\t\t·DecimalField.max_digits</span><br><span class=\"line\">\t\t\t\t·位数总数</span><br><span class=\"line\">\t\t\t·DecimalField.decimal_places</span><br><span class=\"line\">\t\t\t\t·小数点后的数字位数</span><br><span class=\"line\"></span><br><span class=\"line\">\t·FloatField</span><br><span class=\"line\">\t\t·用Python的float实例来表示的浮点数</span><br><span class=\"line\"></span><br><span class=\"line\">\t·BooleanField</span><br><span class=\"line\">\t\t·true/false 字段，此字段的默认表单控制是CheckboxInput</span><br><span class=\"line\"></span><br><span class=\"line\">\t·NullBooleanField</span><br><span class=\"line\">\t\t·支持null、true、false三种值</span><br><span class=\"line\"></span><br><span class=\"line\">\t·DateField([auto_now=False, auto_now_add=False])</span><br><span class=\"line\">\t\t·使用Python的datetime.date实例表示的日期</span><br><span class=\"line\">\t\t·参数说明</span><br><span class=\"line\">\t\t\t·DateField.auto_now</span><br><span class=\"line\">\t\t\t\t·每次保存对象时，自动设置该字段为当前时间，用于&quot;最后一次修改&quot;的时间戳，它总是使用当前日期，默认为false</span><br><span class=\"line\">\t\t\t·DateField.auto_now_add</span><br><span class=\"line\">\t\t\t\t·当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false</span><br><span class=\"line\">\t\t·说明</span><br><span class=\"line\">\t\t\t·该字段默认对应的表单控件是一个TextInput. 在管理员站点添加了一个JavaScript写的日历控件，和一个“Today&quot;的快捷按钮，包含了一个额外的invalid_date错误消息键</span><br><span class=\"line\">\t\t·注意</span><br><span class=\"line\">\t\t\t·auto_now_add, auto_now, and default 这些设置是相互排斥的，他们之间的任何组合将会发生错误的结果</span><br><span class=\"line\"></span><br><span class=\"line\">\t·TimeField</span><br><span class=\"line\">\t\t·使用Python的datetime.time实例表示的时间，参数同DateField</span><br><span class=\"line\"></span><br><span class=\"line\">\t·DateTimeField</span><br><span class=\"line\">\t\t·使用Python的datetime.datetime实例表示的日期和时间，参数同DateField</span><br><span class=\"line\"></span><br><span class=\"line\">\t·FileField</span><br><span class=\"line\">\t\t·一个上传文件的字段</span><br><span class=\"line\"></span><br><span class=\"line\">\t·ImageField</span><br><span class=\"line\">\t\t·继承了FileField的所有属性和方法，但对上传的对象进行校验，确保它是个有效的image</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">字段选项</span><br><span class=\"line\">\t·概述</span><br><span class=\"line\">\t\t·通过字段选项，可以实现对字段的约束</span><br><span class=\"line\">\t\t·在字段对象时通过关键字参数指定</span><br><span class=\"line\"></span><br><span class=\"line\">\t·null</span><br><span class=\"line\">\t\t·如果为True，则该字段在数据库中是空数据，默认值是 False</span><br><span class=\"line\"></span><br><span class=\"line\">\t·blank</span><br><span class=\"line\">\t\t·如果为True，则该字段允许为空白，默认值是 False</span><br><span class=\"line\"></span><br><span class=\"line\">\t·注意</span><br><span class=\"line\">\t\t·null是数据库范畴的概念，blank是表单验证证范畴的</span><br><span class=\"line\"></span><br><span class=\"line\">\t·db_column</span><br><span class=\"line\">\t\t·字段的名称，如果未指定，则使用属性的名称</span><br><span class=\"line\"></span><br><span class=\"line\">\t·db_index</span><br><span class=\"line\">\t\t·若值为 True, 则在表中会为此字段创建索引</span><br><span class=\"line\"></span><br><span class=\"line\">\t·default</span><br><span class=\"line\">\t\t·默认值</span><br><span class=\"line\"></span><br><span class=\"line\">\t·primary_key</span><br><span class=\"line\">\t\t·若为 True, 则该字段会成为模型的主键字段</span><br><span class=\"line\"></span><br><span class=\"line\">\t·unique</span><br><span class=\"line\">\t\t·如果为 True, 这个字段在表中必须有唯一值</span><br></pre></td></tr></table></figure>\n","text":"前言​    Django对数据库提供了很好的支持，对不同的数据库,django提供了统一调用的API，我们可以根据不同的业务需求使用不同是数据库。Django中引入了ORM(Objects Relational Mapping)对象关系映射，是一种程序技术。在下面会详细的讲解。","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":7,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"Django中模型的关系设计(一)","slug":"Django中模型的关系设计","date":"2018-05-12T03:01:50.000Z","updated":"2018-07-14T08:46:18.627Z","comments":true,"path":"api/articles/Django中模型的关系设计.json","excerpt":"","keywords":null,"cover":null,"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>​    该文档中主要介绍模型的对应关系，一对一，一对多，以及多对多的关系。并且举例说明 模型对应关系描述如下： 1：1 一对一 OneToOneField 1：N 一对多 ForeignKey M：N 多对多 ManyToManyField 常见的几种数据关系，django都提供了很好的支持。</p>\n<h4 id=\"1-一对一\"><a href=\"#1-一对一\" class=\"headerlink\" title=\"1. 一对一\"></a>1. 一对一</h4><h5 id=\"1-1-模型\"><a href=\"#1-1-模型\" class=\"headerlink\" title=\"1.1 模型\"></a>1.1 模型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建学生的模型：</span><br><span class=\"line\">class Student(models.Model):</span><br><span class=\"line\">    stu_name = models.CharField(max_length=6, unique=True)</span><br><span class=\"line\">    stu_sex = models.BooleanField(default=0)</span><br><span class=\"line\">    stu_birth = models.DateField()</span><br><span class=\"line\">    stu_delete = models.BooleanField(default=0)</span><br><span class=\"line\">    stu_create_time = models.DateField(auto_now_add=True)</span><br><span class=\"line\">    stu_operate_time = models.DateField(auto_now=True)</span><br><span class=\"line\">    stu_tel = models.CharField(max_length=11)</span><br><span class=\"line\">    stu_yuwen = models.DecimalField(max_digits=3, decimal_places=1, default=0)</span><br><span class=\"line\">    stu_shuxue = models.DecimalField(max_digits=3, decimal_places=1, default=0)</span><br><span class=\"line\"></span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &apos;stu&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">创建学生拓展的模型：</span><br><span class=\"line\">class StuInfo(models.Model):</span><br><span class=\"line\"></span><br><span class=\"line\">    stu_addr = models.CharField(max_length=30)</span><br><span class=\"line\">    stu_age = models.IntegerField()</span><br><span class=\"line\">    stu = models.OneToOneField(Student)</span><br><span class=\"line\"></span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &apos;stu_info&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用models.OneToOneField()进行关联</span><br><span class=\"line\">class StuInfo(models.Model):下是通过班级获取学生信</span><br><span class=\"line\">    stu = models.OneToOneField(Student)</span><br><span class=\"line\">注意：在数据中关联字段名称叫stu_id</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-2-通过学生拓展表去获取学生信息\"><a href=\"#1-2-通过学生拓展表去获取学生信息\" class=\"headerlink\" title=\"1.2 通过学生拓展表去获取学生信息\"></a>1.2 通过学生拓展表去获取学生信息</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>stuinfo = StuInfo.objects.all().first()\nstudent = stuinfo.stu\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：通过拓展表去获取学生的信息的话，语法如下；</span><br><span class=\"line\">    学生拓展表的单条对象.关联字段，即可获取到学生表的数据</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"1-3-通过学生获取人信息1\"><a href=\"#1-3-通过学生获取人信息1\" class=\"headerlink\" title=\"1.3 通过学生获取人信息1\"></a>1.3 通过学生获取人信息1</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>stu = Student.objects.all().first()\nstuInfo = stu.stuInfo\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：通过学生获取关联表的数据的话，语法如下：</span><br><span class=\"line\">    学生对象.关联的表名，即可获取到关联表的数据</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"1-3-1-通过学生获取人信息2\"><a href=\"#1-3-1-通过学生获取人信息2\" class=\"headerlink\" title=\"1.3.1 通过学生获取人信息2\"></a>1.3.1 通过学生获取人信息2</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在关联字段OneToOneField中加入参数related_name=&apos;xxx&apos;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>在\nstu = Student.objects.all().first()\nstuInfo = stu.xxx\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：通过学生获取关联表的数据的话，语法如下：</span><br><span class=\"line\">    学生对象.关联的字段中定义的related_name参数，即可获取到关联表的数据</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"1-4-设置对应关系的字段为保护模式\"><a href=\"#1-4-设置对应关系的字段为保护模式\" class=\"headerlink\" title=\"1.4 设置对应关系的字段为保护模式 :\"></a>1.4 设置对应关系的字段为保护模式 :</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">models.CASCADE                      默认值</span><br><span class=\"line\">models.PROTECT\t                保护模式</span><br><span class=\"line\">models.SET_NULL                 置空模式</span><br><span class=\"line\">models.SET_DETAULT          置默认值</span><br><span class=\"line\">models.SET()     删除的时候吃重新动态指向一个实体访问对象元素</span><br><span class=\"line\">on_delete = models.PROTECT</span><br><span class=\"line\"></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<p>修改on_delete参数<br>models.OneToOneField(‘Student’, on_delete=models.SET_NULL, null=True)<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在删除student对象的时候，stuinfo的关联字段会设置为空null=True，如下命令去删除student的数据：</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>Student.objects.filter(id=1).delete()<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"1-5-定义on-delete-models-PROTECT\"><a href=\"#1-5-定义on-delete-models-PROTECT\" class=\"headerlink\" title=\"1.5 定义on_delete=models.PROTECT\"></a>1.5 定义on_delete=models.PROTECT</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p =  Student.objects.all().first()</span><br><span class=\"line\">p.delete()</span><br><span class=\"line\"></span><br><span class=\"line\">注意：这个时候去执行该业务逻辑的方法的时候会报错</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"2-一对多\"><a href=\"#2-一对多\" class=\"headerlink\" title=\"2. 一对多\"></a>2. 一对多</h4><h5 id=\"2-1-模型\"><a href=\"#2-1-模型\" class=\"headerlink\" title=\"2.1 模型\"></a>2.1 模型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>定义一个班级类还有学生类，实现一对多的关系：\n先定义班级类\nClass Grade(models.Model):\n    g_name = models.CharField(max_length=16)\n\n定义student\n    class Student:\n        s_name = models.CharField(max_length=10)\n        s_age = models.IntegerField(default=1)\n        s_grade = models.ForeignKey(Grade, on_delete=PROTECT)\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>注意：使用models.ForeignKey关联 获取对象元素 grade.student_set</p>\n<h5 id=\"2-2-获取数据\"><a href=\"#2-2-获取数据\" class=\"headerlink\" title=\"2.2 获取数据\"></a>2.2 获取数据</h5><p>语法：通过一获取多的数据</p>\n<p>公式： 一的对象.多的模型_set</p>\n<p>然后在获取数据all(), get(), filter() 等等</p>\n<p>如下先通过学生去获取班级信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stu = Student.objects.first()</span><br><span class=\"line\">stu.stu_grade</span><br></pre></td></tr></table></figure>\n<p>如下是通过班级获取学生信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g = Grade.objects.all().first()</span><br><span class=\"line\">g.stugrade.all()   ---&gt; 其中stugrade是定义的related_name参数</span><br></pre></td></tr></table></figure>\n<p>重点： 定义了related_name字段以后，只能通过related_name去反向获取数据，在也不能通过_set方法去获取数据了</p>\n<h5 id=\"2-3-性能对比\"><a href=\"#2-3-性能对比\" class=\"headerlink\" title=\"2.3 性能对比\"></a>2.3 性能对比</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取班级的学生(通过一获取多)</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>1. 低性能方法：\ng = Grade.objects.all().first()\ns = Student.objects.filter(s_grade=g)\n\n2. 高性能方法：\ng = Grate.objects.all().first()\ns = g.student_set.all()\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2-4-练习题\"><a href=\"#2-4-练习题\" class=\"headerlink\" title=\"2.4 练习题\"></a>2.4 练习题</h5><h6 id=\"2-6-获取python班下的所有学生的信息\"><a href=\"#2-6-获取python班下的所有学生的信息\" class=\"headerlink\" title=\"2.6 获取python班下的所有学生的信息\"></a>2.6 获取python班下的所有学生的信息</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class=\"line\">allstu = gs.student_set.all()</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-7-获取python班下语文成绩大于80分的女学生\"><a href=\"#2-7-获取python班下语文成绩大于80分的女学生\" class=\"headerlink\" title=\"2.7 获取python班下语文成绩大于80分的女学生\"></a>2.7 获取python班下语文成绩大于80分的女学生</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class=\"line\">allstu = gs.student_set.filter(stu_yuwen__gte=80)</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-8-获取python班下语文成绩超过数学成绩10分的男学生\"><a href=\"#2-8-获取python班下语文成绩超过数学成绩10分的男学生\" class=\"headerlink\" title=\"2.8 获取python班下语文成绩超过数学成绩10分的男学生\"></a>2.8 获取python班下语文成绩超过数学成绩10分的男学生</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class=\"line\">allstu = gs.student_set.filter(stu_yuwen__gte=F(&apos;stu_shuxue&apos;) + 10)</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-9-获取出生在80后的男学生，查看他们的班级\"><a href=\"#2-9-获取出生在80后的男学生，查看他们的班级\" class=\"headerlink\" title=\"2.9 获取出生在80后的男学生，查看他们的班级\"></a>2.9 获取出生在80后的男学生，查看他们的班级</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class=\"line\">allstu = gs.student_set.filter(stu_birth__gte=&apos;1980-01-01&apos;, stu_birth__lte=&apos;1990-01-01&apos;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"3-多对多\"><a href=\"#3-多对多\" class=\"headerlink\" title=\"3. 多对多\"></a>3. 多对多</h4><h5 id=\"3-1-M-N-模型\"><a href=\"#3-1-M-N-模型\" class=\"headerlink\" title=\"3.1 M:N 模型\"></a>3.1 M:N 模型</h5><p>定义购物车，用户的例子实现多对多：<br>\\<figure class=\"highlight plain\"><figcaption><span>创建用户模型: class GoodsUser(models.Model): u_name </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<pre><code>2. 创建商品模型:\nclass Goods(models.Model):\n    g_name = models.CharField(max_length=32)\n    g_user = models.ManyToManyField(User)\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-2-多对多表结构\"><a href=\"#3-2-多对多表结构\" class=\"headerlink\" title=\"3.2 多对多表结构\"></a>3.2 多对多表结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">多对多关系：</span><br><span class=\"line\">1. 生成表的时候会多生成一张表（实际会有三张表）</span><br><span class=\"line\">2. 生成的表是专门用来维护关系的</span><br><span class=\"line\">3. 生成的表是使用两个外键来维护多对多的关系</span><br><span class=\"line\">4. 两个一对多的关系来实现多对多的实现　　　</span><br><span class=\"line\">5. 删除一个表的数据的话，中间关联表也要删除相关的信息</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-3-练习题\"><a href=\"#3-3-练习题\" class=\"headerlink\" title=\"3.3 练习题\"></a>3.3 练习题</h5><h6 id=\"3-3-1-获取第一个用户购买了那些商品\"><a href=\"#3-3-1-获取第一个用户购买了那些商品\" class=\"headerlink\" title=\"3.3.1 获取第一个用户购买了那些商品\"></a>3.3.1 获取第一个用户购买了那些商品</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>gu = GoodsUser.objects.all().first()\nallstu = gu.goods_set.all()\n</code></pre><p>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-3-2-获取指定商品的购买用户信息\"><a href=\"#3-3-2-获取指定商品的购买用户信息\" class=\"headerlink\" title=\"3.3.2 获取指定商品的购买用户信息\"></a>3.3.2 获取指定商品的购买用户信息</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<pre><code>g = Goods.objects.filter(id=1)[0]\ng.g_user.all()\n</code></pre><p>​<code></code></p>\n","text":"前言​    该文档中主要介绍模型的对应关系，一对一，一对多，以及多对多的关系。并且举例说明 模型对应关系描述如下： 1：1 一对一 OneToOneField 1：N 一对多 ForeignKey M：N 多对多 ManyToManyField 常见的几种数据关系，django","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":7,"path":"api/categories/Django.json"}],"tags":[{"name":"Django、ORM","slug":"Django、ORM","count":1,"path":"api/tags/Django、ORM.json"}]},{"title":"windows下如何一步一步搭建Django项目","slug":"如何一步一步搭建Django项目","date":"2018-05-11T11:36:22.000Z","updated":"2018-06-05T01:45:24.361Z","comments":true,"path":"api/articles/如何一步一步搭建Django项目.json","excerpt":"<h3 id=\"1-安装虚拟环境\"><a href=\"#1-安装虚拟环境\" class=\"headerlink\" title=\"1.安装虚拟环境\"></a>1.安装虚拟环境</h3><p>​    首先，要确保的是你的电脑已经安装了Python和pip包，如果没有安装，那么请移步百老师将Python环境搭建好！有了Python环境后，接下来我们就正式安装虚拟环境了。</p>\n<p>​    <strong>为什么要安装虚拟环境呢？</strong> 首先是每个项目所需要的环境不一样，如果我们每个项目都使用一个环境，那么环境必然是复杂臃肿的，其次，某些项目需要不同的版本，比如Python2、Python3和Django1.x、Django2.x等。</p>\n<p>​    好了，正式开始！</p>","keywords":null,"cover":"/2018/05/11/如何一步一步搭建Django项目/./项目目录.png","content":null,"text":"1.安装虚拟环境​    首先，要确保的是你的电脑已经安装了Python和pip包，如果没有安装，那么请移步百老师将Python环境搭建好！有了Python环境后，接下来我们就正式安装虚拟环境了。​    为什么要安装虚拟环境呢？ 首先是每个项目所需要的环境不一样，如果我们每个项","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":7,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"Django初识","slug":"Django的初识","date":"2018-05-10T07:01:50.000Z","updated":"2018-06-05T01:44:30.249Z","comments":true,"path":"api/articles/Django的初识.json","excerpt":"<h3 id=\"1-Django简介：\"><a href=\"#1-Django简介：\" class=\"headerlink\" title=\"1.Django简介：\"></a>1.Django简介：</h3><p>Django发布于2005年7月，是当前Python世界里最有名且成熟的网络框架。 最初是被开发用于管理劳伦斯出版集团旗下的以新闻内容为主的网站的，即CMS(内容管理系统)软件。</p>\n<p>Django是一个用Python编写的开放源代码的Web应用框架，代码是开源的。此系统采用了MVC的框架模式, 也可以称为MTV模式</p>\n<p>具体介绍详见<a href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"noopener\">Django官网</a></p>\n<hr>","keywords":null,"cover":"/2018/05/10/Django的初识/./django1.jpg","content":null,"text":"1.Django简介：Django发布于2005年7月，是当前Python世界里最有名且成熟的网络框架。 最初是被开发用于管理劳伦斯出版集团旗下的以新闻内容为主的网站的，即CMS(内容管理系统)软件。Django是一个用Python编写的开放源代码的Web应用框架，代码是开源的。","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":7,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]}]}