{"name":"django","slug":"django","count":1,"postlist":[{"title":"在Djnago当中restful风格的实现","slug":"在djnago当中restful风格的实现","date":"2018-05-18T05:31:15.000Z","updated":"2018-07-14T09:05:14.710Z","comments":true,"path":"api/articles/在djnago当中restful风格的实现.json","excerpt":"<h4 id=\"1-修改响应的结构\"><a href=\"#1-修改响应的结构\" class=\"headerlink\" title=\"1. 修改响应的结构\"></a>1. 修改响应的结构</h4><h5 id=\"1-1-修改settings-py中的返回数据结构的配置信息\"><a href=\"#1-1-修改settings-py中的返回数据结构的配置信息\" class=\"headerlink\" title=\"1.1 修改settings.py中的返回数据结构的配置信息\"></a>1.1 修改settings.py中的返回数据结构的配置信息</h5><p><img src=\"/2018/05/18/在djnago当中restful风格的实现/django_rest_render_setting.png\" alt=\"图\"></p>\n<p>注意：定义default_renderer_classes参数，指定render的时候使用我们自定义的CustomJsonRender的类方法</p>","keywords":null,"cover":"/2018/05/18/在djnago当中restful风格的实现/django_rest_render_setting.png","content":null,"text":"1. 修改响应的结构1.1 修改settings.py中的返回数据结构的配置信息 [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"django","slug":"django","count":1,"path":"api/categories/django.json"}],"tags":[{"name":"Restful,django","slug":"Restful-django","count":1,"path":"api/tags/Restful-django.json"}]}]}ount":6,"path":"api/tags/Django.json"}]},{"title":"关于Django无法加载media文件里的静态文件问题解决方法","slug":"关于django无法加载media文件里的静态文件问题解决方法","date":"2018-05-09T12:16:55.000Z","updated":"2018-06-05T01:44:59.590Z","comments":true,"path":"api/articles/关于django无法加载media文件里的静态文件问题解决方法.json","excerpt":"<h3 id=\"第一种配置\"><a href=\"#第一种配置\" class=\"headerlink\" title=\"第一种配置\"></a>第一种配置</h3><h4 id=\"第一步、在setting里加入如下配置\"><a href=\"#第一步、在setting里加入如下配置\" class=\"headerlink\" title=\"第一步、在setting里加入如下配置\"></a>第一步、在setting里加入如下配置</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATIC_URL = <span class=\"string\">'/static/'</span></span><br><span class=\"line\">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class=\"string\">'static'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MEDIA_URL = <span class=\"string\">'/media/'</span></span><br><span class=\"line\">MEDIA_ROOT = os.path.join(BASE_DIR, <span class=\"string\">'media'</span>)</span><br></pre></td></tr></table></figure>","keywords":null,"cover":null,"content":null,"text":"第一种配置第一步、在setting里加入如下配置1<br>2<br>3<br>4<br>5<br>6<br>STATIC_URL = '/static/'<br>STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]<br><b","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":7,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"windows下如何一步一步搭建Django项目","slug":"如何一步一步搭建Django项目","date":"2018-05-11T11:36:22.000Z","updated":"2018-06-05T01:45:24.361Z","comments":true,"path":"api/articles/如何一步一步搭建Django项目.json","excerpt":"<h3 id=\"1-安装虚拟环境\"><a href=\"#1-安装虚拟环境\" class=\"headerlink\" title=\"1.安装虚拟环境\"></a>1.安装虚拟环境</h3><p>​    首先，要确保的是你的电脑已经安装了Python和pip包，如果没有安装，那么请移步百老师将Python环境搭建好！有了Python环境后，接下来我们就正式安装虚拟环境了。</p>\n<p>​    <strong>为什么要安装虚拟环境呢？</strong> 首先是每个项目所需要的环境不一样，如果我们每个项目都使用一个环境，那么环境必然是复杂臃肿的，其次，某些项目需要不同的版本，比如Python2、Python3和Django1.x、Django2.x等。</p>\n<p>​    好了，正式开始！</p>","keywords":null,"cover":"/2018/05/11/如何一步一步搭建Django项目/./项目目录.png","content":null,"text":"1.安装虚拟环境​    首先，要确保的是你的电脑已经安装了Python和pip包，如果没有安装，那么请移步百老师将Python环境搭建好！有了Python环境后，接下来我们就正式安装虚拟环境了。​    为什么要安装虚拟环境呢？ 首先是每个项目所需要的环境不一样，如果我们每个项","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":7,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"Django使用自带的admin管理后台","slug":"django使用自带的admin管理后台","date":"2018-05-20T08:16:55.000Z","updated":"2018-06-25T09:11:18.377Z","comments":true,"path":"api/articles/django使用自带的admin管理后台.json","excerpt":"<h1 id=\"Django使用自带的admin管理后台\"><a href=\"#Django使用自带的admin管理后台\" class=\"headerlink\" title=\"Django使用自带的admin管理后台\"></a>Django使用自带的admin管理后台</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Django框架是十分的强大的，利用其它框架，我们可能要自己去实现后台管理，但是Django直接就已经集成了管理后台，在管理后台中我们可以对自定义model进行CRUD操作，也能进行列表展示解析，分页等等</p>\n<h3 id=\"使用admin管理后台\"><a href=\"#使用admin管理后台\" class=\"headerlink\" title=\"使用admin管理后台\"></a>使用admin管理后台</h3><p><strong>1.在model中定义Student的模型</strong></p>","keywords":null,"cover":null,"content":null,"text":"Django使用自带的admin管理后台前言Django框架是十分的强大的，利用其它框架，我们可能要自己去实现后台管理，但是Django直接就已经集成了管理后台，在管理后台中我们可以对自定义model进行CRUD操作，也能进行列表展示解析，分页等等使用admin管理后台1.在mo","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":7,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"Django分页，中间件，验证码使用指南","slug":"django分页，中间件，验证码使用指南","date":"2018-05-26T10:20:55.000Z","updated":"2018-06-25T09:10:16.312Z","comments":true,"path":"api/articles/django分页，中间件，验证码使用指南.json","excerpt":"<h1 id=\"django分页，中间件，验证码使用指南\"><a href=\"#django分页，中间件，验证码使用指南\" class=\"headerlink\" title=\"django分页，中间件，验证码使用指南\"></a>django分页，中间件，验证码使用指南</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在django中提供了很多的插件功能，有利于开发者快速开发，比如中间件，分页器等 还提供了Pillow库，可以进行生成图片，用于登录的验证码图书设计。</p>\n<h3 id=\"1-中间件Middleware\"><a href=\"#1-中间件Middleware\" class=\"headerlink\" title=\"1. 中间件Middleware\"></a>1. 中间件Middleware</h3><p><strong>中间件：</strong><br></p>","keywords":null,"cover":"/2018/05/26/django分页，中间件，验证码使用指南/./django_middleware_liucheng.png","content":null,"text":"django分页，中间件，验证码使用指南前言在django中提供了很多的插件功能，有利于开发者快速开发，比如中间件，分页器等 还提供了Pillow库，可以进行生成图片，用于登录的验证码图书设计。1. 中间件Middleware中间件：<br><br>a) 是一个轻量级的，底层的插","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":7,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"Django中模型的关系设计(一)","slug":"Django中模型的关系设计","date":"2018-05-12T03:01:50.000Z","updated":"2018-07-14T09:02:06.040Z","comments":true,"path":"api/articles/Django中模型的关系设计.json","excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>​    该文档中主要介绍模型的对应关系，一对一，一对多，以及多对多的关系。并且举例说明 模型对应关系描述如下： 1：1 一对一 OneToOneField 1：N 一对多 ForeignKey M：N 多对多 ManyToManyField 常见的几种数据关系，django都提供了很好的支持。</p>","keywords":null,"cover":null,"content":null,"text":"前言​    该文档中主要介绍模型的对应关系，一对一，一对多，以及多对多的关系。并且举例说明 模型对应关系描述如下： 1：1 一对一 OneToOneField 1：N 一对多 ForeignKey M：N 多对多 ManyToManyField 常见的几种数据关系，django","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":7,"path":"api/categories/Django.json"}],"tags":[{"name":"Django、ORM","slug":"Django、ORM","count":1,"path":"api/tags/Django、ORM.json"}]},{"title":"Django中模型的设计","slug":"Django中模型的设计","date":"2018-05-12T03:01:50.000Z","updated":"2018-07-14T09:02:50.655Z","comments":true,"path":"api/articles/Django中模型的设计.json","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>​    Django对数据库提供了很好的支持，对不同的数据库,django提供了统一调用的API，我们可以根据不同的业务需求使用不同是数据库。Django中引入了ORM(Objects Relational Mapping)对象关系映射，是一种程序技术。在下面会详细的讲解。</p>","keywords":null,"cover":"/2018/05/12/Django中模型的设计/C:/Users\\Administrator\\Desktop\\Desktop\\blog\\source\\_posts\\django_models.jpg","content":null,"text":"前言​    Django对数据库提供了很好的支持，对不同的数据库,django提供了统一调用的API，我们可以根据不同的业务需求使用不同是数据库。Django中引入了ORM(Objects Relational Mapping)对象关系映射，是一种程序技术。在下面会详细的讲解。","link":"","raw":null,"photos":[],"categories":[{"name":"Django","slug":"Django","count":7,"path":"api/categories/Django.json"}],"tags":[{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]}]}