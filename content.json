{"pages":[{"title":"About-Me","text":"","path":"about-me/index.html"},{"title":"Categories","text":"","path":"categories/index.html"},{"title":"Tags","text":"","path":"tags/index.html"}],"posts":[{"title":"CentOS7.2下安装MySQL5.7","text":"CentOS7.2 安装mysql5.7初始密码问题总结CentOS 7之后的版本yum的默认源中使用MariaDB替代原先MySQL。这对于想要使用MySQL的朋友来说，安装MySQL就比较麻烦了，笔者看了网上很多的教程，感觉不是很友好，幸运的是经过几天的摸索，笔者终于成功的装上了MySQL，现将安装的经验总结如下。 1、下载mysql的源1wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz ###2、创建组、用户 建立用户mysql，组mysql。后面mysql就使用这个用户来运行（注意这也是mysql启动脚本中默认的用户，因此最好不要改名）。groupadd mysqluseradd -r -g mysql mysql - （使用-r参数表示mysql用户是一个系统用户，不能登录） 3、安装3.1 解压将前面得到的mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz 解压、解归档gunzip mysql-5.7.22-linux-glibc2.12-x86_64.tar.gztar -xvf mysql-5.7.22-linux-glibc2.12-x86_64.tar将解压后的目录移动至 /usr/local ，并重命名为 mysqlmv mysql-5.7.22-linux-glibc2.12-x86_64 /usr/local/mysql此后 /usr/local/mysql 就是安装目录了注意，如果mysql目录下没有data和tmp目录，手动新建，并修改权限 3.2 目录权限设置将mysql及其下所有的目录所有者和组均设为mysql:cd /usr/local/mysqlchown mysql:mysql -R . 3.3 初始化123456789/usr/local/mysql/bin/mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql# 初始化成功后出现如下信息：201x-xx-xxT07:10:13.583130Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).201x-xx-xx T07:10:13.976219Z 0 [Warning] InnoDB: New log files created, LSN=45790201x-xx-xx T07:10:14.085666Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.201x-xx-xx T07:10:14.161899Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 1fa941f9-effd-11e5-b67d-000c2958cdc8.201x-xx-xx T07:10:14.165534Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.201x-xx-xx T07:10:14.168555Z 1 [Note] A temporary password is generated for root@localhost: xxxxxxxxx, # 注意最后一行，它给了root一个初始密码，后面要登录的时候要用到这个密码。 3.4 配置配置 /etc 下的 my.cnf 文件，如果没有请创建 12345678910[mysqld]basedir = /usr/local/mysqldatadir = /usr/local/mysql/dataport = 3306socket = /usr/local/mysql/tmp/mysql.sock sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES[client]socket = /usr/local/mysql/tmp/mysql.sock 4、后台运行服务端1234注意：请将&#123;mysql&#125; 替换成 mysql安装路径&#123;mysql&#125;/bin/mysqld_safe &amp;ps -ef | grep mysql 或者 netstat -nap | grep 3306 - 查看进程&#123;mysql&#125;/bin/mysqladmin -uroot -p - 停止 5、设置mysql以服务运行并且开机启动将{mysql}/ support-files/mysql.server 拷贝为/etc/init.d/mysql并设置运行权限 1234567cp mysql.server /etc/init.d/mysqlchmod +x /etc/init.d/mysql# 把mysql注册为开机启动的服务chkconfig --add mysql# 当然也可以手动进行服务的开启和关闭：/etc/init.d/mysql start/etc/init.d/mysql stop 6、连接客户端1234567891011121314151617# 将客户端软链接到 /usr/local/binln -s &#123;mysql&#125;/bin/mysql /usr/local/bin/mysql# 客户端连接mysql -u root -p# 输入刚才的初始化密码进入# 进入之后，修改密码mysql&gt; alter user 'root'@'localhost' identified by 'xxxxxxx';# 配置远程可以连接use mysql # 打开mysql数据库 # 将host设置为%表示任何ip都能连接mysql，当然也可以将host指定为某个ip update user set host='%' where user='root' and host='localhost'; flush privileges; #刷新权限表，使配置生效 关闭远程连接，恢复mysql的默认设置（只能本地连接）# 将host设置为localhost表示只能本地连接mysql update user set host='localhost' where user='root'; # 也可以添加一个用户名为aaa，密码为xxx，权限为%（表示任意ip都能连接）的远程连接用户grant all on *.* to 'aaa'@'%' identified by 'xxx';","path":"2018/05/26/CentOS7-2下安装MySQL5-7/"},{"title":"Git版本控制软件的操作","text":"Git — 版本控制 分布式版本控制系统 - 社会化编程GitBitMove - BitKeeper 集中式版本控制系统 - 版本控制服务器锁定模式 CVS - Concurrent Version System VSS - Visual Source Safe ClearCase - IBM - Rational合并模式 Sunversion - SVN git命令git –version 查看git版本 设置全局配置 – 身份信息 git config –global user.name ‘Zoie1996’ git config –global user.email &#39;18086869080@163.com‘ git init –&gt; /Users/GavinLiu/Desktop/hello/.git/ 初始化 自动创建一个隐藏文件夹 add 放入暂存区 git add [file] 把文件添加到版本控制 get add . 把当前路径下所有东西纳入版本控制 commit 提交到本地仓库 - 本地隐藏文件夹 git commit -m ‘创建日历文件’ 将文件放到仓库, 写明更新原因 git status 查看放在暂存区的文件状态 git checkout – 撤回所有暂存区文件git checkout – [file] 撤回暂存区文件 git log 查看历史版本git log –pretty=oneline 单行显示get reflog 查看版本包括未来版本 git reset –hard [版本代号前6位] 返回任何一个版本 远端代码下载 git clone [url] 将远端仓库(代码托管平台)代码克隆到本地 git push origin master 将本地项目推送到服务器 origii-默认(项目在服务器的一个别名) master-主干 git branch [分支file] 创建分支名 git branch 查看分支 git checkout [分支file] 切换到分支 git merge [分支file] 将分支合并到master get rm [file] 删除文件 git pull 获取服务器更新的代码 本地代码上传 创建一个空项目 –&gt; 获取url git remote add orgin [url] 连接远端仓库 git push -u origin master 将本地仓库与远端仓库origin别名对应 第一次提交代码-u git pull 获取服务器更新的代码 本地建仓库 → 托管到远端 123456789101112mkdit [dir]cd [dir]git initgit add .get statusgit commit -m '说明'git loggit reset --hard idgit refloggit remote add origin &lt;url&gt;git push -u origin mastergit pull Git日常工作流程 — 远端服务器项目已存在 12345678910111213git clone [url]cd [dir]git branch [分支file] 创建分支名git branch 查看分支git checkout [分支file] 切换到分支git add .git commit -m '说明'git push origin [分支file]get checkout master 切回到mastergit merge [分支file] 将分支合并到mastergit push origin master","path":"2018/05/26/git版本控制软件的操作/"},{"title":"Linux系统的基础操作命令","text":"Linux系统历史Linux系统历史1234567unix -- minix -- linux （linux是通用操作系统 ）第一台计算机 -- 由Pascal 发明的第一台数字计算机 -- 差分机 -- 程序控制硬件工作 - Ada（女的）世界上第一个程序员第一台电子数字计算机 --ENIAC 冯诺依曼计算机linux - 是系统内核发行版本：RedHat Linux、Ubuntu、CentOS","path":"2018/05/26/Linux系统的基础操作命令/"},{"title":"Python的基本语法整理","text":"Python的基础语法知识整理集合收集整理了Python的基础语法，包括数据类型的详细解释和Python自带的各类模块 1. 进制之间的转换二进制 -&gt; 十进制八进制 -&gt; 二级制十进制 -&gt; 二进制 2.逻辑运算符逻辑运算符与(and) 或(or) 非(not) 3.数学函数abs(): 返回数字的绝对值max(): 返回给定参数中的最大值min():返回给定参数中最小的值pow(): 求幂(求次方) [求3^4 print(3**4) print(pow(3, 4))]round():四舍五入,如果只有一个参数,默认不保留小数点.参数二: 小数点后保留的位数 import mathmath.ceil():向上取整math.floor():向下取整math.sqrt():求开方math.modf():返回参数的整数部分和小数部分 import randomrandom.choice():返回列表,元祖,字典中的某一个值random.choices():返回列表,元祖,字典中的指定个数值个值 k 关键字参数random.random():返回0-1之间的数, [0, 1)random.uniform():返回指定的一个区间范围的随机数 [, )random.randint():返回指定区间范围的随机整数 [, ]random.shuffle():将列表中的数据进行打乱排序 4. 字符串len():求字符串,元组,列表,字典,集合的长度split():通过指定分隔符对字符串进行切片str1 3 (将字符串拼接n次) 提取某个字符串 str1[::3] 正序输出 步长为3 str2 = str1[::-1] 倒序输出 str2 = str1[::-2] 倒序输出 步长为2转义字符: \\t(制表符) \\n(换行符) 5.字符串格式化%s: 给字符串站位%d: 给int类型站位%f: 给浮点类型站位, 默认保留6为小数 %.2f: 保留两位小数 %10.2f 共10位,保留两位小数,其他为使用空格补齐 %010.2f 共10位,保留两位小数,其他为使用0补齐 %c: 打印一个字符%o: 将十进制转换成八进制%x: 将十进制转换成十六进制 6.字符串比较大小从第一个字符开始比较,将字符转换成ascii值进行比较如果小于则返回True,否则返回False0-9:48-57a-z: 97-122A-Z:65-90 附: 字符串相关函数 7.表达式表达式为真的情况: not 0 -1 为真表达式为假的情况: 0 ‘’ None False [] () {} 8.列表列表函数: append()往列表后边追加一个元素([1, 2 ,3],当做一个元素追加到列表中) # 没有add()方法 extend()在末尾一次性追加另外一个列表中的多个值([1, 2 ,3],当做三个个元素追加到列表中) insert():在指定下标出添加一个元素,原来位置处的元素往后移动list.insert(下标, 对象) pop():将列表中指定下标的元素删除, 如果默认不传递参数,则删除的是最后一个元素@参数一: [可有可无] 列表对应的下标 remove():移除列表中指定的元素@参数一: 列表中的元素 clear():清除列表中所有的元素 index():获取列表元素锁对应的下标 @参数一: 列表中的某一个元素 返回值: 列表中元素所对应的下标 count(): 计算列表中元素出现的次数 reverse(): 用于反向列表中元素 等同于[::-1]reversed(seq) 函数返回一个反转的迭代器。seq – 要转换的序列，可以是 tuple, string, list 或 range。 sort(): 应用在 list 上的方法, 返回的是对已经存在的列表进行操作sort(self, key=None, reverse=False)sorted(): 所有可迭代的对象进行排序操作, 返回的是一个新的 list，而不是在原来的基础上进行的操作。sorted(iterable, key=None, reverse=False) reverse = True 降序 , reverse = Flase 升序(默认) 引用传递 在列表中,如果修改一个列表的元素,那么对应的另外一个列表的元素也改变list14 = [2, 3, 4]list15 = list14 # 内存地址相同 值传递 在列表中修改一个元素的值时,对应的另外一个列表中的值是不发生改变的list16 = [1, 2, 3, 4]list17 = list16[:] # 内存地址不同list17 = list16.copy() # 内存地址不同 9.元组有序集合, 不可修改创建一个空的元组 tupel1 = ()tuple1 = (4, ) # 定义只有一个参数的元组 10.字典无序集合, key唯一,必须是不可变类型访问获取方式: dict[key] dict.get(key) 添加元素: dict[key] = value # key为原字典中不存在的键修改: dict[key] = balue # key为原字典中存在的键dict.keys() 以列表返回字典中所有的键dict.values() 以列表返回字典中所有的值dict.items() 以列表返回可遍历的(键, 值) 元组数组dict.setdefault() 返回指定键的值,如果键不存在于字典中，将会添加键并将值设为默认值dict.pop([key]) 删除指定键值对, 需传入参数 # 没有remove()方法enumerate()用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。 11.set 集合1.set是无序2.set集合是不可改变的3.创建一个空的集合 set1 = set(());set1 = set([]);set1 = set({})set.add(): 增加一个元素(重复元素不能添加) # 没有append()方法set.remove():删除元素, 参数是元素set.pop():删除最后一个元素set1 &amp; set2 交集set1 | set2 并集set1 - set2 差集set1 ^ set2 交并集 12.数据类型转换dict-&gt;set 取字典的键, 传入集合set3 = {‘a’:1, ‘b’:2, ‘c’:3} 这是一个字典set –&gt; dict(错误) # 不能将集合转换成字典, 只有键, 没有值 13.函数参数 不定长参数: *args 关键字参数: **kw 匿名函数: 关键字 lambda eg: sum = lambda x: x ** x 偏函数: 导入模块 import functoolsfunctools.partical()就是创建一个新的函数.不需要自行定义函数.直接将结果赋值给一个变量,而 这个变量就是一个函数.这个函数的目的是将默认参数给固定住 回调函数: 定义函数时,将函数名作为参数传递过来,然后在函数里边再次调用函数 14.文件操作Python3 File(文件)方法open(path_name[, mode[, buffering]]) 打开文件 参数二:默认只读fileObject.read([size]) 从文件读取指定的字节数，如果未给定或为负则读取所有。fileObject.write() 写文件 # 如果要写入字符串以外的数据,先将他转换为字符串fileObject.close() 关闭文件fileObject.readline([size]) 读取整行内容,包括\\n字符, 如果给定参数则从文件开始读取指定的字符个数fileObject.readlines([sizeint]) 读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。f.tell() 返回一个整数,表示当前文件指针的位置(就是到文件头的比特数).f.seek(偏移量,[起始位置]) 用来移动文件指针 #偏移量:单位:比特,可正可负起始位置:0-文件头,默认值;1-当前位置;2-文件尾for line in f: print(line) 通过迭代器访问with open(pathname, mode) as f​示列详见菜鸟教程Python3 File(文件)方法http://www.runoob.com/python3/python3-file-methods.html StringIOfrom io import StringIOf = StringIO([str]) 初始化, 然后像file一样读写在内存中读写str, 使用StringIO会比在文件中操作内容速度快 ByteIOfrom io import BytesIOf = ByteIO([b’\\xe4\\xb8\\xad\\xe6\\x96\\x87’]) 初始化,然后像文件一样读写在内存中读写二进制数据 总结 ：StringIO和BytesIO是在内存中操作str和bytes的方法，使得和读写文件具有一致的接口。 模式 r r+ w w+ a a+ 读 + + + + 写 + + + + + 创建 + + + + 覆盖 + + 指针在开始 + + + + 指针在结尾 + + Python OS 文件/目录方法os.getcwd() 返回当前的工作目录 # 获取绝对路径os.listdir(path) 返回指定的文件夹包含的文件或文件夹的名字的列表os.mkdir(path) 在当前目录下创建新的目录os.rmdir(path) 删除目录, 只能删除空目录os.rename(src, dst) 对文件进行重命名os.stat(file) 获取文件属性os.remove(file) 删除文件 #可以将本文件删除os.path.join(path1, path2) 路径拼接os.path.split(path) 拆分路径 # 返回一个元组(目录, 最后一个文件/目录名称)os.path.splitext(path) 获取文件的或站名os.path.exists(path) 判断文件/目录是否存在os.path.isfile(path) 判断是否是文件os.path.getsize(file) 获取文件的大小os.path.dirname(path) 获取当前文件的目录os.path.basename(path) 获取当前文件/目录名示列网址:http://www.runoob.com/python/os-file-methods.html 15.作用域一旦在函数内部设置为global,则该变量全局有效 16.装饰器本质还是函数, 一般使用装饰器来装饰其他函数.本身还是函数的调用@property@属性名.setter广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。 17.日期和时间time(时间)time.localtime() 获取本地时间time.asctime() / time.ctime() 将时间转换成用户可读时间, 返回str格式 (Thu Apr 19 23:02:35 2018)time.strftime(‘%Y-%m-%d %X’) 字符串的格式化输出, 返回str格式 2018-04-19 23:07:51time.strptime(timeObject, ‘%Y-%m-%d %X’) # 将字符串的时间格式转换成元祖类型的时间格式 datetime(日期)datetime.datetime.now() 获取当前时间datetime.datetime(2020, 2, 2, 20, 20, 20) 获取指定的时间date1.strftime(‘%Y-%m-%d %X’) 时间字符串的格式化输出, 返回str格式 calendar(日历)calendar.month(2018, 4) 获取指定的月份日历calendar.calendar(2018) 获取指定的年份日历 更多时间日期方法想见网址:http://www.runoob.com/python/python-date-time.html csv文件csv是跨多种形式的导入导出的标准格式 比如: mysql excel它是一种一纯文本形式来存储数据.文件中的每一行代表一条数据.每条记录包含逗号分隔 18.部分模块import keyword 标志符 查看所有关键字import functools 偏函数import collections collections.deque方法可以创建一个两端都可以操作的列表,也就是说我们可以在两端进行添加和删除 from types import MethodType MethodType() 动态添加方法到类或对象实例中","path":"2018/05/26/Python的基本语法整理/"},{"title":"Pycharm的快捷键集合","text":"Windows下Python IDE PyCharm的基本快捷键和配置简介关于在windows下PyCharm的一些基本快捷键方式的整理集合 包括编辑、查找、运行、调试。。。 1、编辑（Editing) Ctrl + Space 基本的代码完成（类、方法、属性） Ctrl + Alt + Space 快速导入任意类 Ctrl + Shift + Enter 语句完成 Ctrl + P 参数信息（在方法中调用参数） Ctrl + Q 快速查看文档 Shift + F1 外部文档 Ctrl + 鼠标 简介 Ctrl + F1 显示错误描述或警告信息 Alt + Insert 自动生成代码 Ctrl + O 重新方法 Ctrl + Alt + T 选中 Ctrl + / 行注释 Ctrl + Shift + / 块注释 Ctrl + W 选中增加的代码块 Ctrl + Shift + W 回到之前状态 Ctrl + Shift + ]/[ 选定代码块结束、开始 Alt + Enter 快速修正 Ctrl + Alt + L 代码格式化 Ctrl + Alt + O 优化导入 Ctrl + Alt + I 自动缩进 Tab / Shift + Tab 缩进、不缩进当前行 Ctrl+X/Shift+Delete 剪切当前行或选定的代码块到剪贴板 Ctrl+C/Ctrl+Insert 复制当前行或选定的代码块到剪贴板 Ctrl+V/Shift+Insert 从剪贴板粘贴 Ctrl + Shift + V 从最近的缓冲区粘贴 Ctrl + D 复制选定的区域或行 Ctrl + Y 删除选定的行 Ctrl + Shift + J 添加智能线 Ctrl + Enter 智能线切割 Shift + Enter 另起一行 Ctrl + Shift + U 在选定的区域或代码块间切换 Ctrl + Delete 删除到字符结束 Ctrl + Backspace 删除到字符开始 Ctrl + Numpad+/- 展开折叠代码块 Ctrl + Numpad+ 全部展开 Ctrl + Numpad- 全部折叠 Ctrl + F4 关闭运行的选项卡 2、查找/替换(Search/Replace) F3 下一个 Shift + F3 前一个 Ctrl + R 替换 Ctrl + Shift + F 全局查找 Ctrl + Shift + R 全局替换 3、运行(Running) Alt + Shift + F10 运行模式配置 Alt + Shift + F9 调试模式配置 Shift + F10 运行 Shift + F9 调试 Ctrl + Shift + F10 运行编辑器配置 Ctrl + Alt + R 运行manage.py任务 4、调试(Debugging) F8 跳过 F7 进入 Shift + F8 退出 Alt + F9 运行游标 Alt + F8 验证表达式 Ctrl + Alt + F8 快速验证表达式 F9 恢复程序 Ctrl + F8 断点开关 Ctrl + Shift + F8 查看断点 5、导航(Navigation) Ctrl + N 跳转到类 Ctrl + Shift + N 跳转到符号 Alt + Right/Left 跳转到下一个、前一个编辑的选项卡 F12 回到先前的工具窗口 Esc 从工具窗口回到编辑窗口 Shift + Esc 隐藏运行的、最近运行的窗口 Ctrl + Shift + F4 关闭主动运行的选项卡 Ctrl + G 查看当前行号、字符号 Ctrl + E 当前文件弹出 Ctrl+Alt+Left/Right 后退、前进 Ctrl+Shift+Backspace 导航到最近编辑区域 Alt + F1 查找当前文件或标识 Ctrl+B / Ctrl+Click 跳转到声明 Ctrl + Alt + B 跳转到实现 Ctrl + Shift + I查看快速定义 Ctrl + Shift + B跳转到类型声明 Ctrl + U跳转到父方法、父类 Alt + Up/Down跳转到上一个、下一个方法 Ctrl + ]/[跳转到代码块结束、开始 Ctrl + F12弹出文件结构 Ctrl + H类型层次结构 Ctrl + Shift + H方法层次结构 Ctrl + Alt + H调用层次结构 F2 / Shift + F2下一条、前一条高亮的错误 F4 / Ctrl + Enter编辑资源、查看资源 Alt + Home显示导航条F11书签开关 Ctrl + Shift + F11书签助记开关 Ctrl + #[0-9]跳转到标识的书签 Shift + F11显示书签 6、搜索相关(Usage Search) Alt + F7/Ctrl + F7文件中查询用法 Ctrl + Shift + F7文件中用法高亮显示 Ctrl + Alt + F7显示用法 7、重构(Refactoring) F5复制F6剪切 Alt + Delete安全删除 Shift + F6重命名 Ctrl + F6更改签名 Ctrl + Alt + N内联 Ctrl + Alt + M提取方法 Ctrl + Alt + V提取属性 Ctrl + Alt + F提取字段 Ctrl + Alt + C提取常量 Ctrl + Alt + P提取参数 8、控制VCS/Local History Ctrl + K提交项目 Ctrl + T更新项目 Alt + Shift + C查看最近的变化 Alt + BackQuote(‘)VCS快速弹出 9、模版(Live Templates) Ctrl + Alt + J当前行使用模版 Ctrl +Ｊ插入模版 10、基本(General) Alt + #[0-9]打开相应的工具窗口 Ctrl + Alt + Y同步 Ctrl + Shift + F12最大化编辑开关 Alt + Shift + F添加到最喜欢 Alt + Shift + I根据配置检查当前文件 Ctrl + BackQuote(‘)快速切换当前计划 Ctrl + Alt + S 打开设置页 Ctrl + Shift + A查找编辑器里所有的动作 Ctrl + Tab在窗口间进行切换","path":"2018/05/26/pycharm的快捷键集合/"}]}