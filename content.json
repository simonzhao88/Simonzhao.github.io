{"pages":[{"title":"About-Me","text":"","path":"about-me/index.html"},{"title":"分类","text":"","path":"categories/index.html"},{"title":"标签","text":"","path":"tags/index.html"}],"posts":[{"title":"JavaScript基础","text":"JavaScript​ ECMAScript - 语法规范 - ES5 (ECMA欧洲计算机制造商协会) ​ BOM - Browser Object Model - 浏览器对象模型 - window ​ DOM - Document Object Model - 文档对象模型 - document 编程范式(理念) 面向对象编程 函数式编程 层叠样式表前置, JS后置 外部脚本不能包含 标签。 document.getElementById(“some id”) 。这个方法是 HTML DOM 中定义的, 是用于访问 HTML 元素的正式 W3C 标准x.innerHTML=”Hello JavaScript”; //改变内容 输出JavaScript 显示数据 JavaScript 可以通过不同的方式来输出数据： 使用 window.alert() 弹出警告框。 alert() 方法用于显示带有一条指定消息和一个 确认 按钮的警告框。 使用 document.write() 方法将内容写到 HTML 文档中。 使用 innerHTML 写入到 HTML 元素。 使用 console.log() 写入到浏览器的控制台。 操作 HTML 元素 如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(id) 方法。 请使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容： 语法JavaScript 使用关键字 var 来定义变量， 使用等号来为变量赋值 JavaScript 对大小写是敏感的 分号用于分隔 JavaScript 语句。通常我们在每条可执行的语句结尾添加分号。使用分号的另一用处是在一行中编写多条语句。 在文本字符串中使用反斜杠对代码行进行换行 注释单行注释以 // 开头 多行注释以 / 开始，以 / 结尾 数据类型和变量简单数据类型:字符串（String） 、数字(Number) 、布尔(Boolean) 、数组(Array) 、 空（Null） 、未定义（Undefined） 复杂数据类型: 对象(Object) 当声明新变量时，可以使用关键词 “new” 来声明其类型： JavaScript中有隐式的类型转换 ==比较，它会自动转换数据类型再比较 ===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。 ===(全等于/严格等) !==(严格不等) 逻辑运算符: &amp;&amp;(短路与) 只有所有都为true，&amp;&amp;运算结果才是true，第一个为false后面的不再判断 ||(短路或) 只要其中有一个为true，||运算结果就是true，第一个为true后面的不再判断 ! (非) 作用域局部作用域变量在函数内声明，变量为局部作用域。 局部变量：只能在函数内部访问。 全局作用域变量在函数外定义，即为全局变量。 全局变量有 全局作用域 : 网页中所有脚本和函数均可使用。 如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。 JavaScript 变量生命周期JavaScript 变量生命周期在它声明时初始化。 局部变量在函数执行完毕后销毁。 全局变量在页面关闭后销毁。 JavaScript全局函数isNaN() - 是不是不是一个数 parseInt() - 取整数如果取不出返回NaN parseFloat() - 取小数如果取不出返回NaN isFinite() - 是不是有限数值 eval() - 非常强大的函数 evaluate - XSS(跨站脚本攻击) encodeURIComponent() - 处理成百分号编码 decodeURIComponent() - 将百分号编码解码还原 Date 对象创建 Date 对象： new Date() 方法 描述 getFullYear() 从 Date 对象以四位数字返回年份 getMonth() 从 Date 对象返回月份 (0 ~ 11) getDate() 从 Date 对象返回一个月中的某一天 (1 ~ 31) getDay() 从 Date 对象返回一周中的某一天 (0 ~ 6) getHours() 返回 Date 对象的小时 (0 ~ 23) getMinutes() 返回 Date 对象的分钟 (0 ~ 59) getSeconds() 返回 Date 对象的秒数 (0 ~ 59) trim() 函数用于去除字符串两端的空白字符 parseInt() 将字符串转换成整数,提取数字 disabled .onclick 绑定与反绑定 递归定义 - - 定义的左边和定义的右边出现了相同的概念 递归调用 - - 函数直接或间接的调用了自身 收敛条件 - 什么时候就不用递归了 递归公式 全排列 迷宫寻路 ==卡特兰数== window对象alert() 浏览器弹出带有一段消息和一个确认按钮的警告框 prompt() 显示可提示用户输入的对话框 confirm() 显示带有一段消息以及确认按钮和取消按钮的对话框 open() 打开一个新的浏览器窗口或查找一个已命名的窗口 close() 关闭浏览器窗口 setTimeout() 在指定的毫秒数后调用函数或计算表达式 setInterval() 按照指定的周期（以毫秒计）来调用函数或计算表达式 clearTimeout() 取消由 setTimeout() 方法设置的 timeout clearInterval() 取消由 setInterval() 设置的 timeout moveTo() 把窗口的左上角移动到一个指定的坐标 moveBy() 可相对窗口的当前坐标把它移动指定的像素 resizeBy() 按照指定的像素调整窗口的大小 window对象属性location - 用于窗口或框架的 Location 对象 属性: location.href 设置或返回当前显示的文档的完整 URL 1document.write(location.href); Location 对象方法: assign() 载入一个新的文档 // window.location.assign(URL) reload() 重新载入当前文档 // location.reload(); replace() 用新的文档替换当前文档 // location.replace(newURL) history - go() / fofward / back screen = avaiwidth / avaiHeight Document 对象查找元素的方法 getElementById() 返回对拥有指定 id 的第一个对象的引用 getElementsByTagName() 返回带有指定标签名的对象集合 getElementsByClassName() 返回文档中所有指定类名的元素集合 querySelector() 根据指定的选择器查找单个元素 querySelectorAll() 根据指定的选择器查找所有元素 绑定事件与取消绑定 document.addEventListener() 方法用于向文档添加事件句柄 document.removeEventListener() 方法来移除 addEventListener() 方法添加的事件句柄 element.addEventListener() 方法为指定元素添加事件句柄 1document.addEventListener(event, function) ​ - event 必需。描述事件名称的字符串。’click’ - 当用户点击某个对象时调用的事件句柄 ​ - function 必需。描述了事件触发后执行的函数 修改节点的内容和属性 textContent / innerHTML / nodeValue 访问成员运算符 setAttribute() / getAttribute() / removeAttribute() 创建新节点 - ()追加新的子节点 - appendChild() / insertBefore()删除子节点 - removeChild() 如果已经获得一个节点 如何访问它的父节点、子节点、兄弟节点parentNodechildren / firstChild / lastChildnextSibling / prevSibling DOM事件对象鼠标事件 onmousedown 鼠标按钮被按下 target 事件属性可返回事件的目标节点（触发该事件的节点），如生成事件的元素、文档或窗口 1event.target 事件捕获 - 从外向里传播事件 事件冒泡 - 从里向外传播事件 jQuery jQuery的$函数的作用: 1、 $(function() {}) - \\$函数中传入的参数是一个函数作用: 绑定页面加载完成之后要执行的回调函数 2、 $(selector) - \\$函数中传入的参数是一个选择器 ​ 作用: 通过选择器获得对应的元素并将其处理成jQuery对象jQuery对象本质是一个数组 ​ 如果需要将jQuery对象还原成原生的JS对象一[index]/get(index) 3、 $(elem) - \\$函数中传入的参数是原生JS对象 ​ 作用: 将原生JS对象转换成jQuery对象(更多的属性更多的方法) 4、 $(tag) - \\$函数中传入的参数是一个标签 ​ 作用: 和标签对应的元素(得到的是jQuery对身) 通过jQuery对象的方法可以用更少的代码做更多的事情 在写代码的时候不需要考虑浏览器兼容性问题(jQuery已经做了处理） 引入多个JS库出现冲突时可以通过下面的方式让出$函数 ​ jQuery.noConfict() ; 让出$函数以后原来用\\$函数的地方全部换成jQuery 查找元素 选择器 * / element / #id / .class / selector1, selector2 ancestor descendant / parent&gt;child / previous+next / previous~siblings 筛选器 基本筛选器：:not(selector) / :first / :last / :even / :odd / :eq(index) / :gt(index) / :lt(index) / :animated / :focus 内容筛选器：:contains(‘…’) / :empty / :parent / :has(selector) 可见性筛选器：:hidden / :visible 子节点筛选器：:nth-child(expr) / :first-child / :last-child / :only-child 属性筛选器：[attribute] / [attribute=’value’] / [attribute!=’value’] / [attribute^=’value’] / [attribute$=’value’] / [attribute|=’value’] / [attribute~=’value’] 表单： :input / :text / :password / :radio / :checkbox / :submit / :image / :reset / :button / :file / :selected / :enabled / :disabled / :checked 执行操作 内容操作 获取/修改内容：html() / text() / replaceWith() / remove() 获取/设置元素：before() / after() / prepend() / append() / remove() / clone() / unwrap() / detach() / empty() / add() 获取/修改属性：attr() / removeAttr() / addClass() / removeClass() / css() 获取/设置表单值：val() 查找操作 查找方法：find() / parent() / children() / siblings() / next() / nextAll() / prev() / prevAll() 筛选器：filter() / not() / has() / is() / contains() 索引编号：eq() 尺寸和位置 尺寸相关：height() / width() / innerHeight() / innerWidth() / outerWidth() / outerHeight() 位置相关：offset() / position() / scrollLeft() / scrollTop() 特效和动画 基本动画：show() / hide() / toggle() 消失出现：fadeIn() / fadeOut() / fadeTo() / fadeToggle() 滑动效果：slideDown() / slideUp() / slideToggle() 自定义：delay() / stop() / animate() 事件 文档加载：ready() / load() 用户交互：on() / off() 回调函数 evt参数代表的是事件对象 - 绑定了和事件相关的所有信息 如果事件回调函数中要用到和事件相关的属性和方法就最好指定evt参数 target / clientX / button / keyCode preventDefault() / stopPropagation() 不管函数是否指定了evt参数当事件发生回调该函数时都会传入该参数 调构造函数 前面加new 数组里删元素要从后往前循环 Ajax原生Ajax - Asynchronous JavaScript and XML 让浏览器向服务器发出异步请求(非阻塞式请求)，等服务器返回了响应数据(JSON/XML)后就可以对页面进行局部刷 新，这样就可以在不中断用户体验的前提下刷新页面数据 JavaScript发送HTTP请求获取数据默认只支持同源数据(同源策略) http://www.abc.com/index.html -&gt; JavaScript 如果要跨域取数据是需要对方提供数据的服务器支持的 JSONP / 服务器端设置支持跨域取数据(RESTful)","path":"2018/05/26/JavaScript基础/"},{"title":"CSS层叠样式表知识汇总","text":"CSS什么是 CSS? CSS 指层叠样式表 (Cascading Style Sheets) 样式定义如何显示 HTML 元素 样式通常存储在样式表中 把样式添加到 HTML 4.0 中，是为了解决内容与表现分离的问题 外部样式表可以极大提高工作效率 外部样式表通常存储在 CSS 文件中 多个样式定义可层叠为一 CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明，声明总是以分号(;)结束，声明组以大括号({})括起来 就近原则 具体性原则 id选择器&gt;类选择器&gt;标签选择器&gt;通配符选择器 重要性原则 ！important 盒子模型 1content（内容） - padding（内边距） - border（边框） - background-image（背景图片） - background-color（背景颜色） - margin（外边距） 边框和轮廓border 设置对象边框的特性 border-collapse : collapse 设置表格的边框合并为一个单一的边框 border-color 设置或检索对象的边框颜色 outline 设置或检索对象外的线条轮廓。 字体font-size 设置字体大小 font-family 规定文本的字体系列 font-style 规定文本的字体尺寸 font-weight 规定字体的粗细 文本color 指定文本的颜色 line-height 设置行高 text-align 规定文本的水平对齐方式 text-decoration 规定添加到文本的装饰效果，：none取消下划线 内边距padding 简写属性在一个声明中设置所有填充属性。该属性可以有1到4个值 padding-bottom 设置元素的底填充padding-left 设置元素的左填充padding-right 设置元素的右填充padding-top 设置元素的顶部填充 背景div是不支持background-color 的，background-color是table等的属性，你要用background：#（这里是颜色代码）；这样来写 background 复合属性，设置对象的背景特性 background-color 设置或检索对象的背景颜色background-image 设置或检索对象的背景图像 外边距margin 在一个声明中设置所有外边距属性，该属性可以有1到4个值 display属性display：none 此元素不会被显示。 display：block 此元素将显示为块级元素，此元素前后会带有换行符。 display：inline 默认。此元素会被显示为内联元素，元素前后没有换行符。 hidden 元素是不可见的。 列表list-style 在一个声明中设置所有的列表属性list-style-position 设置列表项标记的放置位置 定位position:static; 正常文档流 position:relative; 相对定位 相对于元素原来的位置定位没有脱离文档流,对兄弟元素没有影响 position:absolute; 绝对定位(相对于父元素来设置位置 脱离了文档流 position:fixd； 固定定位（相对于浏览器窗口摆放） z-index 属性指定一个元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。 float：left 元素向左浮动。 float：right 元素向右浮动。 黑科技 overflow: auto; 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。 overflow: hidden 兄弟选择器 ~ 相邻兄弟选择器 + 12345安装字体@font-face &#123; font-family: '给字体起个名 '; src: url(路径);&#125;","path":"2018/05/26/CSS层叠样式表知识汇总/"},{"title":"Html知识汇总","text":"HTML什么是HTML?HTML 是用来描述网页的一种语言。 Tag: Content 装内容装数据 CSS: Display 渲染,显示 JavaScript: Behavior 交互,行为 HTML 指的是超文本标记语言: Hyper Text Markup Language HTML 不是一种编程语言，而是一种标记语言 标记语言是一套标记标签 (markup tag) HTML 使用标记标签来描述网页 HTML 文档包含了HTML 标签及文本 内容 HTML文档也叫做web 页面 HTML格式1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;主题title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;我的第一个标题&lt;/h1&gt; &lt;p&gt;我的第一个段落。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 解析\\&lt;!DOCTYPE html&gt; 声明为 HTML5 文档 \\ 元素是 HTML 页面的根元素 \\ 元素包含了文档的元（meta）数据 \\ 元素描述了文档的标题 \\ 元素包含了可见的页面内容 \\ 元素定义一个大标题 \\ 元素定义一个段落 \\ 水平分割线 \\折行符 \\\\ 下标标签 \\\\ 上标标签 \\\\ 强调标签,变粗 \\\\ 强调标签,斜体 列表无序列表12345&lt;ul&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;草莓&lt;/li&gt; &lt;li&gt;芒果&lt;/li&gt;&lt;/ul&gt; 浏览器显示: 苹果 草莓 芒果 有序列表12345&lt;ol&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;草莓&lt;/li&gt; &lt;li&gt;芒果&lt;/li&gt;&lt;/ol&gt; 浏览器显示: 苹果 草莓 芒果 自定义列表\\ 标签定义一个描述列表。 \\ 标签与 \\ （定义项目/名字）和 \\ （描述每一个项目/名字）一起使用。 123456&lt;dl&gt; &lt;dt&gt;星期&lt;/dt&gt; &lt;dd&gt;1 2 3 4 5 6 7&lt;/dd&gt; &lt;dt&gt;月份&lt;/dt&gt; &lt;dd&gt;1 2 3 4 5 6 7 8 9 10 11 12&lt;/dd&gt; &lt;/dl&gt; 浏览器显示: 星期​ 1 2 3 4 5 6 7月份​ 1 2 3 4 5 6 7 8 9 10 11 12 链接1&lt;a href=\"url\"&gt;链接文本&lt;/a&gt; href属性描述了链接的目标。 页面链接\\ 12345当前页面跳转,target=\"_self\"可以不写&lt;a href=\"http://www.baidu.com\" target=\"_self\"&gt;百度&lt;/a&gt;&lt;a href=\"http://www.baidu.com\"&gt;百度&lt;/a&gt;打开新页面跳转&lt;a href=\"http://www.qq.com\" target=\"_blank\"&gt;腾讯&lt;/a&gt; 锚点链接(id属性)\\ id属性可用于创建在一个HTML文档书签标记。 id=”tips” tips-提示部分,自己定义 123&lt;h1 id=\"top\"&gt;Hello,word!&lt;/h1&gt;&lt;a href=\"#top\"&gt;回顶部&lt;/a&gt; 功能性链接1234自动弹出发邮箱功能&lt;a href=\"mailto:fenghao1994@163.com\"&gt;联系站长&lt;/a&gt;发起消息会话,wp.qq.com网站自动生成&lt;a target=\"_blank\" href=\"http://wpa.qq.com/msgrd?v=3&amp;uin=&amp;site=qq&amp;menu=yes\"&gt;&lt;img border=\"0\" src=\"http://wpa.qq.com/pa?p=2::52\" alt=\"联系客服\" title=\"联系客服\"/&gt;&lt;/a&gt; 图像定义图像的语法是: 1&lt;img src=\"url\" alt=\"som_text\" &gt; src 指 “source”。源属性的值是图像的 URL 地址,或图片的相对路径。 alt 为图像定义一串预备的可替换的文本。在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息。此时，浏览器将显示这个替代性的文本而不是图像。 height（高度） 与 width（宽度）属性用于设置图像的高度与宽度，属性值默认单位为像素，也可以不设置。 1&lt;img src=\"./mm.jpg\" alt=\"这是一个女的\" width=\"300\" height=\"500\"&gt; 表格1234567891011121314151617181920212223&lt;table border=\"1\"&gt; &lt;caption&gt;个人信息统计&lt;/caption&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;身高&lt;/th&gt; th&lt;th&gt;体重&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;王大锤&lt;/td&gt; &lt;td&gt;20&lt;/td&gt; &lt;td colspan=\"2\" align=\"center\"&gt;170&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;img src=\"..jpg\" width=\"60\" height=\"20\"&gt; &lt;div&gt;李小刀&lt;/div&gt; &lt;/td&gt; &lt;td&gt;18&lt;/td&gt; &lt;td&gt;180&lt;/td&gt; &lt;td&gt;58&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; &lt;caption&gt; 定义表格标题 &lt;th&gt; 定义表格的表头 &lt;tr&gt; 定义表格的行 &lt;td&gt; 定义表格单元 align=&quot;center&quot; 居中 colspan=&quot;&quot; 合并 音频1234&lt;audio controls&gt; &lt;source src=\"horse.ogg\"&gt; &lt;source src=\"horse.mp3\"&gt;&lt;/audio&gt; controls 属性供添加播放、暂停和音量控件；可以换成autoplay 自动播放；autoplay loop自动循环播放。 \\ 元素可以链接不同的音频文件，浏览器将使用第一个支持的音频文件 视频1234&lt;video width=\"320\" height=\"240\" controls&gt; &lt;source src=\"movie.mp4\" type=\"video/mp4\"&gt; &lt;source src=\"movie.ogg\" type=\"video/ogg\"&gt;&lt;/video&gt; controls 元素提供了 播放、暂停和音量控件来控制视频。 width 和 height 属性控制视频的尺寸.尽量不要写 区块区块元素 大多数 HTML 元素被定义为块级元素或内联元素。 块级元素在浏览器显示时，通常会以新行来开始（和结束）。 实例: \\, \\, \\, \\,\\ 内联元素 内联元素在显示时通常不会以新行开始。 实例: \\, \\, \\, \\ \\ 元素 \\ 元素是块级元素，它可用于组合其他 HTML 元素的容器。 \\ 元素 \\ 元素是内联元素，可用作文本的容器 表单 表单用于收集不同类型的用户输入。表单是一个包含表单元素的区域。表单元素是允许用户在表单中输入内容,比如：文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等。表单使用表单标签 \\ 来设置 输入元素多数情况下被用到的表单标签是输入标签（\\）。 输入类型是由类型属性（type）定义的。 文本域（Text Fields）文本域通过\\ 标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域。 123456789101112131415161718&lt;form action=\"\" method=\"post\" enctype=\"\"&gt; &lt;fieldset&gt; &lt;legend&gt;必填信息&lt;/legend&gt; &lt;p&gt; &lt;label&gt;用户名: &lt;/label&gt; &lt;input type=\"text\" name=\"uid\" placeholder=\"请输入用户名\" required&gt; &lt;/p&gt; &lt;p&gt; &lt;label&gt;密码 &lt;/label&gt; &lt;input type=\"password\" name=\"pwd\"&gt; &lt;/p&gt; &lt;p&gt; &lt;label&gt;性别: &lt;/label&gt; &lt;input type=\"radio\" name=\"sex\"&gt;男 &lt;input type=\"radio\" name=\"sex\" checked&gt;女 &lt;/p&gt; &lt;/fieldset&gt;&lt;/form&gt; action “”里面是要提交的地址 method 规定如何发送表单数据（表单数据发送到 action属性所规定的页面）。共有两种方法：post 方法和 get 方法 – get get是从服务器上获取数据 get是把参数数据队列加到提交表单的action属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到 get传送的数据量较小。 get安全性非常低。 – post post是向服务器传送数据 post是通过HTTP post机制,将表单内各个字段与其内容放置在HTML HEADER内一起传送到action属性所指的URL地址。用户看不到这个过程。 post传送的数据量较大，一般被默认为不受限制。 post安全性较高。 enctype 属性规定在将表单数据发送到服务器之前如何对其进行编码。 注意：只有 method=”post” 时才使用 enctype 属性。 &lt;fieldset&gt;&lt;/fieldset&gt; 定义了一组相关的表单元素，并使用外框包含起来 &lt;legend&gt;&lt;/legend&gt; 定义了 \\ 元素的标题 &lt;label&gt; 定义了 \\ 元素的标签，一般为输入标题 &lt;input&gt; 输入标签输入类型是由类型属性（type）定义的。 name 属性规定表单的名称,用于在 JavaScript 中引用元素，或者在表单提交之后引用表单数据。 placeholder 属性规定可描述输入字段预期值的简短的提示信息,该提示会在用户输入值之前显示在输入字段中。 注意：placeholder 属性适用于下面的 input 类型：text、search、url、tel、email 和 password。 required 属性是一个布尔属性,规定必需在提交表单之前填写输入字段。 注意：required 属性适用于下面的 input 类型：text、search、url、tel、email、password、date pickers、number、checkbox、radio 和 file。 密码字段密码字段通过标签\\ 来定义 单选按钮&lt;input type=&quot;radio&quot;&gt; 标签定义了表单单选框选项 checked选框默认选项 复选框\\ 定义了复选框. 用户需要从若干给定的选择中选取一个或若干选项 123456&lt;label&gt;爱好: &lt;/label&gt;&lt;input type=\"checkbox\" name=\"fav\"&gt;游戏&lt;input type=\"checkbox\" name=\"fav\" checked&gt;阅读&lt;input type=\"checkbox\" name=\"fav\" checked disabled&gt;旅游&lt;input type=\"checkbox\" name=\"fav\"&gt;运动&lt;input type=\"checkbox\" name=\"fav\"&gt;其他 checked disabled 默认必选项,不能取消. 文件上传1&lt;input type=\"file\" name=\"photo1\" multiple&gt; multiple 可接受多个值的文件上传字段 日期1&lt;input type=\"date\" name=\"b\"&gt; 下拉列表选项\\定义了下拉选项列表 \\定义下拉列表中的选项 12345678&lt;label&gt;籍贯: &lt;/label&gt;&lt;select&gt;name=\"prov\" &lt;option&gt;北京&lt;/option&gt; &lt;option&gt;上海&lt;/option&gt; &lt;option selected&gt;四川&lt;/option&gt; &lt;option&gt;云南&lt;/option&gt; &lt;option&gt;海南&lt;/option&gt;&lt;/select&gt; selected 默认选项 多行文本框\\ 标签定义一个多行的文本输入控件。文本区域中可容纳无限数量的文本，其中的文本的默认字体是等宽字体（通常是 Courier）。可以通过 cols 和 rows 属性来规定 textarea 的尺寸大小 字符实体12345678910111213141516 空格 &amp;nbsp;&lt; 小于号 &amp;lt; &gt; 大于号 &amp;gt;&amp; 和号 &amp;amp;&quot; 引号 &amp;quot;&apos; 撇号 &amp;apos; (IE不支持)￠ 分 &amp;cent;£ 镑 &amp;pound; ¥ 人民币/日元 € 欧元 &amp;euro;§ 小节 &amp;sect;× 乘号 &amp;times; ÷ 除号 &amp;divide;© 版权 &amp;copy;® 注册商标 &amp;reg;™ 商标 &amp;trade;","path":"2018/05/26/Html知识汇总/"},{"title":"CentOS7.2下安装MySQL5.7","text":"CentOS7.2 安装mysql5.7初始密码问题总结CentOS 7之后的版本yum的默认源中使用MariaDB替代原先MySQL。这对于想要使用MySQL的朋友来说，安装MySQL就比较麻烦了，笔者看了网上很多的教程，感觉不是很友好，幸运的是经过几天的摸索，笔者终于成功的装上了MySQL，现将安装的经验总结如下。 1、下载mysql的源1wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz ###2、创建组、用户 建立用户mysql，组mysql。后面mysql就使用这个用户来运行（注意这也是mysql启动脚本中默认的用户，因此最好不要改名）。groupadd mysqluseradd -r -g mysql mysql - （使用-r参数表示mysql用户是一个系统用户，不能登录） 3、安装3.1 解压将前面得到的mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz 解压、解归档gunzip mysql-5.7.22-linux-glibc2.12-x86_64.tar.gztar -xvf mysql-5.7.22-linux-glibc2.12-x86_64.tar将解压后的目录移动至 /usr/local ，并重命名为 mysqlmv mysql-5.7.22-linux-glibc2.12-x86_64 /usr/local/mysql此后 /usr/local/mysql 就是安装目录了注意，如果mysql目录下没有data和tmp目录，手动新建，并修改权限 3.2 目录权限设置将mysql及其下所有的目录所有者和组均设为mysql:cd /usr/local/mysqlchown mysql:mysql -R . 3.3 初始化123456789/usr/local/mysql/bin/mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql# 初始化成功后出现如下信息：201x-xx-xxT07:10:13.583130Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).201x-xx-xx T07:10:13.976219Z 0 [Warning] InnoDB: New log files created, LSN=45790201x-xx-xx T07:10:14.085666Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.201x-xx-xx T07:10:14.161899Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 1fa941f9-effd-11e5-b67d-000c2958cdc8.201x-xx-xx T07:10:14.165534Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.201x-xx-xx T07:10:14.168555Z 1 [Note] A temporary password is generated for root@localhost: xxxxxxxxx, # 注意最后一行，它给了root一个初始密码，后面要登录的时候要用到这个密码。 3.4 配置配置 /etc 下的 my.cnf 文件，如果没有请创建 12345678910[mysqld]basedir = /usr/local/mysqldatadir = /usr/local/mysql/dataport = 3306socket = /usr/local/mysql/tmp/mysql.sock sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES[client]socket = /usr/local/mysql/tmp/mysql.sock 4、后台运行服务端1234注意：请将&#123;mysql&#125; 替换成 mysql安装路径&#123;mysql&#125;/bin/mysqld_safe &amp;ps -ef | grep mysql 或者 netstat -nap | grep 3306 - 查看进程&#123;mysql&#125;/bin/mysqladmin -uroot -p - 停止 5、设置mysql以服务运行并且开机启动将{mysql}/ support-files/mysql.server 拷贝为/etc/init.d/mysql并设置运行权限 1234567cp mysql.server /etc/init.d/mysqlchmod +x /etc/init.d/mysql# 把mysql注册为开机启动的服务chkconfig --add mysql# 当然也可以手动进行服务的开启和关闭：/etc/init.d/mysql start/etc/init.d/mysql stop 6、连接客户端1234567891011121314151617# 将客户端软链接到 /usr/local/binln -s &#123;mysql&#125;/bin/mysql /usr/local/bin/mysql# 客户端连接mysql -u root -p# 输入刚才的初始化密码进入# 进入之后，修改密码mysql&gt; alter user 'root'@'localhost' identified by 'xxxxxxx';# 配置远程可以连接use mysql # 打开mysql数据库 # 将host设置为%表示任何ip都能连接mysql，当然也可以将host指定为某个ip update user set host='%' where user='root' and host='localhost'; flush privileges; #刷新权限表，使配置生效 关闭远程连接，恢复mysql的默认设置（只能本地连接）# 将host设置为localhost表示只能本地连接mysql update user set host='localhost' where user='root'; # 也可以添加一个用户名为aaa，密码为xxx，权限为%（表示任意ip都能连接）的远程连接用户grant all on *.* to 'aaa'@'%' identified by 'xxx';","path":"2018/05/26/CentOS7-2下安装MySQL5-7/"},{"title":"Git版本控制软件的操作","text":"Git — 版本控制 分布式版本控制系统 - 社会化编程GitBitMove - BitKeeper 集中式版本控制系统 - 版本控制服务器锁定模式 CVS - Concurrent Version System VSS - Visual Source Safe ClearCase - IBM - Rational合并模式 Sunversion - SVN git命令git –version 查看git版本 设置全局配置 – 身份信息 git config –global user.name ‘Zoie1996’ git config –global user.email &#39;18086869080@163.com‘ git init –&gt; /Users/GavinLiu/Desktop/hello/.git/ 初始化 自动创建一个隐藏文件夹 add 放入暂存区 git add [file] 把文件添加到版本控制 get add . 把当前路径下所有东西纳入版本控制 commit 提交到本地仓库 - 本地隐藏文件夹 git commit -m ‘创建日历文件’ 将文件放到仓库, 写明更新原因 git status 查看放在暂存区的文件状态 git checkout – 撤回所有暂存区文件git checkout – [file] 撤回暂存区文件 git log 查看历史版本git log –pretty=oneline 单行显示get reflog 查看版本包括未来版本 git reset –hard [版本代号前6位] 返回任何一个版本 远端代码下载 git clone [url] 将远端仓库(代码托管平台)代码克隆到本地 git push origin master 将本地项目推送到服务器 origii-默认(项目在服务器的一个别名) master-主干 git branch [分支file] 创建分支名 git branch 查看分支 git checkout [分支file] 切换到分支 git merge [分支file] 将分支合并到master get rm [file] 删除文件 git pull 获取服务器更新的代码 本地代码上传 创建一个空项目 –&gt; 获取url git remote add orgin [url] 连接远端仓库 git push -u origin master 将本地仓库与远端仓库origin别名对应 第一次提交代码-u git pull 获取服务器更新的代码 本地建仓库 → 托管到远端 123456789101112mkdit [dir]cd [dir]git initgit add .get statusgit commit -m '说明'git loggit reset --hard idgit refloggit remote add origin &lt;url&gt;git push -u origin mastergit pull Git日常工作流程 — 远端服务器项目已存在 12345678910111213git clone [url]cd [dir]git branch [分支file] 创建分支名git branch 查看分支git checkout [分支file] 切换到分支git add .git commit -m '说明'git push origin [分支file]get checkout master 切回到mastergit merge [分支file] 将分支合并到mastergit push origin master","path":"2018/05/26/git版本控制软件的操作/"},{"title":"Linux系统的基础操作命令","text":"Linux系统历史Linux系统历史unix – minix – linux （linux是通用操作系统 ）第一台计算机 – 由Pascal 发明的第一台数字计算机 – 差分机 – 程序控制硬件工作 - Ada（女的）世界上第一个程序员第一台电子数字计算机 –ENIAC 冯诺依曼计算机 linux - 是系统内核发行版本：RedHat Linux、Ubuntu、CentOS","path":"2018/05/26/Linux系统的基础操作命令/"},{"title":"Python的基本语法整理","text":"Python的基础语法知识整理集合收集整理了Python的基础语法，包括数据类型的详细解释和Python自带的各类模块 1. 进制之间的转换二进制 -&gt; 十进制八进制 -&gt; 二级制十进制 -&gt; 二进制 2.逻辑运算符逻辑运算符与(and) 或(or) 非(not) 3.数学函数abs(): 返回数字的绝对值max(): 返回给定参数中的最大值min():返回给定参数中最小的值pow(): 求幂(求次方) [求3^4 print(3**4) print(pow(3, 4))]round():四舍五入,如果只有一个参数,默认不保留小数点.参数二: 小数点后保留的位数 import mathmath.ceil():向上取整math.floor():向下取整math.sqrt():求开方math.modf():返回参数的整数部分和小数部分 import randomrandom.choice():返回列表,元祖,字典中的某一个值random.choices():返回列表,元祖,字典中的指定个数值个值 k 关键字参数random.random():返回0-1之间的数, [0, 1)random.uniform():返回指定的一个区间范围的随机数 [, )random.randint():返回指定区间范围的随机整数 [, ]random.shuffle():将列表中的数据进行打乱排序 4. 字符串len():求字符串,元组,列表,字典,集合的长度split():通过指定分隔符对字符串进行切片str1 3 (将字符串拼接n次) 提取某个字符串 str1[::3] 正序输出 步长为3 str2 = str1[::-1] 倒序输出 str2 = str1[::-2] 倒序输出 步长为2转义字符: \\t(制表符) \\n(换行符) 5.字符串格式化%s: 给字符串站位%d: 给int类型站位%f: 给浮点类型站位, 默认保留6为小数 %.2f: 保留两位小数 %10.2f 共10位,保留两位小数,其他为使用空格补齐 %010.2f 共10位,保留两位小数,其他为使用0补齐 %c: 打印一个字符%o: 将十进制转换成八进制%x: 将十进制转换成十六进制 6.字符串比较大小从第一个字符开始比较,将字符转换成ascii值进行比较如果小于则返回True,否则返回False0-9:48-57a-z: 97-122A-Z:65-90 附: 字符串相关函数 7.表达式表达式为真的情况: not 0 -1 为真表达式为假的情况: 0 ‘’ None False [] () {} 8.列表列表函数: append()往列表后边追加一个元素([1, 2 ,3],当做一个元素追加到列表中) # 没有add()方法 extend()在末尾一次性追加另外一个列表中的多个值([1, 2 ,3],当做三个个元素追加到列表中) insert():在指定下标出添加一个元素,原来位置处的元素往后移动list.insert(下标, 对象) pop():将列表中指定下标的元素删除, 如果默认不传递参数,则删除的是最后一个元素@参数一: [可有可无] 列表对应的下标 remove():移除列表中指定的元素@参数一: 列表中的元素 clear():清除列表中所有的元素 index():获取列表元素锁对应的下标 @参数一: 列表中的某一个元素 返回值: 列表中元素所对应的下标 count(): 计算列表中元素出现的次数 reverse(): 用于反向列表中元素 等同于[::-1]reversed(seq) 函数返回一个反转的迭代器。seq – 要转换的序列，可以是 tuple, string, list 或 range。 sort(): 应用在 list 上的方法, 返回的是对已经存在的列表进行操作sort(self, key=None, reverse=False)sorted(): 所有可迭代的对象进行排序操作, 返回的是一个新的 list，而不是在原来的基础上进行的操作。sorted(iterable, key=None, reverse=False) reverse = True 降序 , reverse = Flase 升序(默认) 引用传递 在列表中,如果修改一个列表的元素,那么对应的另外一个列表的元素也改变list14 = [2, 3, 4]list15 = list14 # 内存地址相同 值传递 在列表中修改一个元素的值时,对应的另外一个列表中的值是不发生改变的list16 = [1, 2, 3, 4]list17 = list16[:] # 内存地址不同list17 = list16.copy() # 内存地址不同 9.元组有序集合, 不可修改创建一个空的元组 tupel1 = ()tuple1 = (4, ) # 定义只有一个参数的元组 10.字典无序集合, key唯一,必须是不可变类型访问获取方式: dict[key] dict.get(key) 添加元素: dict[key] = value # key为原字典中不存在的键修改: dict[key] = balue # key为原字典中存在的键dict.keys() 以列表返回字典中所有的键dict.values() 以列表返回字典中所有的值dict.items() 以列表返回可遍历的(键, 值) 元组数组dict.setdefault() 返回指定键的值,如果键不存在于字典中，将会添加键并将值设为默认值dict.pop([key]) 删除指定键值对, 需传入参数 # 没有remove()方法enumerate()用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。 11.set 集合1.set是无序2.set集合是不可改变的3.创建一个空的集合 set1 = set(());set1 = set([]);set1 = set({})set.add(): 增加一个元素(重复元素不能添加) # 没有append()方法set.remove():删除元素, 参数是元素set.pop():删除最后一个元素set1 &amp; set2 交集set1 | set2 并集set1 - set2 差集set1 ^ set2 交并集 12.数据类型转换dict-&gt;set 取字典的键, 传入集合set3 = {‘a’:1, ‘b’:2, ‘c’:3} 这是一个字典set –&gt; dict(错误) # 不能将集合转换成字典, 只有键, 没有值 13.函数参数 不定长参数: *args 关键字参数: **kw 匿名函数: 关键字 lambda eg: sum = lambda x: x ** x 偏函数: 导入模块 import functoolsfunctools.partical()就是创建一个新的函数.不需要自行定义函数.直接将结果赋值给一个变量,而 这个变量就是一个函数.这个函数的目的是将默认参数给固定住 回调函数: 定义函数时,将函数名作为参数传递过来,然后在函数里边再次调用函数 14.文件操作Python3 File(文件)方法open(path_name[, mode[, buffering]]) 打开文件 参数二:默认只读fileObject.read([size]) 从文件读取指定的字节数，如果未给定或为负则读取所有。fileObject.write() 写文件 # 如果要写入字符串以外的数据,先将他转换为字符串fileObject.close() 关闭文件fileObject.readline([size]) 读取整行内容,包括\\n字符, 如果给定参数则从文件开始读取指定的字符个数fileObject.readlines([sizeint]) 读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。f.tell() 返回一个整数,表示当前文件指针的位置(就是到文件头的比特数).f.seek(偏移量,[起始位置]) 用来移动文件指针 #偏移量:单位:比特,可正可负起始位置:0-文件头,默认值;1-当前位置;2-文件尾for line in f: print(line) 通过迭代器访问with open(pathname, mode) as f​示列详见菜鸟教程Python3 File(文件)方法http://www.runoob.com/python3/python3-file-methods.html StringIOfrom io import StringIOf = StringIO([str]) 初始化, 然后像file一样读写在内存中读写str, 使用StringIO会比在文件中操作内容速度快 ByteIOfrom io import BytesIOf = ByteIO([b’\\xe4\\xb8\\xad\\xe6\\x96\\x87’]) 初始化,然后像文件一样读写在内存中读写二进制数据 总结 ：StringIO和BytesIO是在内存中操作str和bytes的方法，使得和读写文件具有一致的接口。 模式 r r+ w w+ a a+ 读 + + + + 写 + + + + + 创建 + + + + 覆盖 + + 指针在开始 + + + + 指针在结尾 + + Python OS 文件/目录方法os.getcwd() 返回当前的工作目录 # 获取绝对路径os.listdir(path) 返回指定的文件夹包含的文件或文件夹的名字的列表os.mkdir(path) 在当前目录下创建新的目录os.rmdir(path) 删除目录, 只能删除空目录os.rename(src, dst) 对文件进行重命名os.stat(file) 获取文件属性os.remove(file) 删除文件 #可以将本文件删除os.path.join(path1, path2) 路径拼接os.path.split(path) 拆分路径 # 返回一个元组(目录, 最后一个文件/目录名称)os.path.splitext(path) 获取文件的或站名os.path.exists(path) 判断文件/目录是否存在os.path.isfile(path) 判断是否是文件os.path.getsize(file) 获取文件的大小os.path.dirname(path) 获取当前文件的目录os.path.basename(path) 获取当前文件/目录名示列网址:http://www.runoob.com/python/os-file-methods.html 15.作用域一旦在函数内部设置为global,则该变量全局有效 16.装饰器本质还是函数, 一般使用装饰器来装饰其他函数.本身还是函数的调用@property@属性名.setter广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。 17.日期和时间time(时间)time.localtime() 获取本地时间time.asctime() / time.ctime() 将时间转换成用户可读时间, 返回str格式 (Thu Apr 19 23:02:35 2018)time.strftime(‘%Y-%m-%d %X’) 字符串的格式化输出, 返回str格式 2018-04-19 23:07:51time.strptime(timeObject, ‘%Y-%m-%d %X’) # 将字符串的时间格式转换成元祖类型的时间格式 datetime(日期)datetime.datetime.now() 获取当前时间datetime.datetime(2020, 2, 2, 20, 20, 20) 获取指定的时间date1.strftime(‘%Y-%m-%d %X’) 时间字符串的格式化输出, 返回str格式 calendar(日历)calendar.month(2018, 4) 获取指定的月份日历calendar.calendar(2018) 获取指定的年份日历 更多时间日期方法想见网址:http://www.runoob.com/python/python-date-time.html csv文件csv是跨多种形式的导入导出的标准格式 比如: mysql excel它是一种一纯文本形式来存储数据.文件中的每一行代表一条数据.每条记录包含逗号分隔 18.部分模块import keyword 标志符 查看所有关键字import functools 偏函数import collections collections.deque方法可以创建一个两端都可以操作的列表,也就是说我们可以在两端进行添加和删除 from types import MethodType MethodType() 动态添加方法到类或对象实例中","path":"2018/05/26/Python的基本语法整理/"},{"title":"Pycharm的快捷键集合","text":"Windows下Python IDE PyCharm的基本快捷键和配置简介关于在windows下PyCharm的一些基本快捷键方式的整理集合 包括编辑、查找、运行、调试。。。 1、编辑（Editing) Ctrl + Space 基本的代码完成（类、方法、属性） Ctrl + Alt + Space 快速导入任意类 Ctrl + Shift + Enter 语句完成 Ctrl + P 参数信息（在方法中调用参数） Ctrl + Q 快速查看文档 Shift + F1 外部文档 Ctrl + 鼠标 简介 Ctrl + F1 显示错误描述或警告信息 Alt + Insert 自动生成代码 Ctrl + O 重新方法 Ctrl + Alt + T 选中 Ctrl + / 行注释 Ctrl + Shift + / 块注释 Ctrl + W 选中增加的代码块 Ctrl + Shift + W 回到之前状态 Ctrl + Shift + ]/[ 选定代码块结束、开始 Alt + Enter 快速修正 Ctrl + Alt + L 代码格式化 Ctrl + Alt + O 优化导入 Ctrl + Alt + I 自动缩进 Tab / Shift + Tab 缩进、不缩进当前行 Ctrl+X/Shift+Delete 剪切当前行或选定的代码块到剪贴板 Ctrl+C/Ctrl+Insert 复制当前行或选定的代码块到剪贴板 Ctrl+V/Shift+Insert 从剪贴板粘贴 Ctrl + Shift + V 从最近的缓冲区粘贴 Ctrl + D 复制选定的区域或行 Ctrl + Y 删除选定的行 Ctrl + Shift + J 添加智能线 Ctrl + Enter 智能线切割 Shift + Enter 另起一行 Ctrl + Shift + U 在选定的区域或代码块间切换 Ctrl + Delete 删除到字符结束 Ctrl + Backspace 删除到字符开始 Ctrl + Numpad+/- 展开折叠代码块 Ctrl + Numpad+ 全部展开 Ctrl + Numpad- 全部折叠 Ctrl + F4 关闭运行的选项卡 2、查找/替换(Search/Replace) F3 下一个 Shift + F3 前一个 Ctrl + R 替换 Ctrl + Shift + F 全局查找 Ctrl + Shift + R 全局替换 3、运行(Running) Alt + Shift + F10 运行模式配置 Alt + Shift + F9 调试模式配置 Shift + F10 运行 Shift + F9 调试 Ctrl + Shift + F10 运行编辑器配置 Ctrl + Alt + R 运行manage.py任务 4、调试(Debugging) F8 跳过 F7 进入 Shift + F8 退出 Alt + F9 运行游标 Alt + F8 验证表达式 Ctrl + Alt + F8 快速验证表达式 F9 恢复程序 Ctrl + F8 断点开关 Ctrl + Shift + F8 查看断点 5、导航(Navigation) Ctrl + N 跳转到类 Ctrl + Shift + N 跳转到符号 Alt + Right/Left 跳转到下一个、前一个编辑的选项卡 F12 回到先前的工具窗口 Esc 从工具窗口回到编辑窗口 Shift + Esc 隐藏运行的、最近运行的窗口 Ctrl + Shift + F4 关闭主动运行的选项卡 Ctrl + G 查看当前行号、字符号 Ctrl + E 当前文件弹出 Ctrl+Alt+Left/Right 后退、前进 Ctrl+Shift+Backspace 导航到最近编辑区域 Alt + F1 查找当前文件或标识 Ctrl+B / Ctrl+Click 跳转到声明 Ctrl + Alt + B 跳转到实现 Ctrl + Shift + I查看快速定义 Ctrl + Shift + B跳转到类型声明 Ctrl + U跳转到父方法、父类 Alt + Up/Down跳转到上一个、下一个方法 Ctrl + ]/[跳转到代码块结束、开始 Ctrl + F12弹出文件结构 Ctrl + H类型层次结构 Ctrl + Shift + H方法层次结构 Ctrl + Alt + H调用层次结构 F2 / Shift + F2下一条、前一条高亮的错误 F4 / Ctrl + Enter编辑资源、查看资源 Alt + Home显示导航条F11书签开关 Ctrl + Shift + F11书签助记开关 Ctrl + #[0-9]跳转到标识的书签 Shift + F11显示书签 6、搜索相关(Usage Search) Alt + F7/Ctrl + F7文件中查询用法 Ctrl + Shift + F7文件中用法高亮显示 Ctrl + Alt + F7显示用法 7、重构(Refactoring) F5复制F6剪切 Alt + Delete安全删除 Shift + F6重命名 Ctrl + F6更改签名 Ctrl + Alt + N内联 Ctrl + Alt + M提取方法 Ctrl + Alt + V提取属性 Ctrl + Alt + F提取字段 Ctrl + Alt + C提取常量 Ctrl + Alt + P提取参数 8、控制VCS/Local History Ctrl + K提交项目 Ctrl + T更新项目 Alt + Shift + C查看最近的变化 Alt + BackQuote(‘)VCS快速弹出 9、模版(Live Templates) Ctrl + Alt + J当前行使用模版 Ctrl +Ｊ插入模版 10、基本(General) Alt + #[0-9]打开相应的工具窗口 Ctrl + Alt + Y同步 Ctrl + Shift + F12最大化编辑开关 Alt + Shift + F添加到最喜欢 Alt + Shift + I根据配置检查当前文件 Ctrl + BackQuote(‘)快速切换当前计划 Ctrl + Alt + S 打开设置页 Ctrl + Shift + A查找编辑器里所有的动作 Ctrl + Tab在窗口间进行切换","path":"2018/05/26/pycharm的快捷键集合/"}]}